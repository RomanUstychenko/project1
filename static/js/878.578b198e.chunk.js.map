{"version":3,"file":"static/js/878.578b198e.chunk.js","mappings":"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","sources":["webpack://project1/./src/components/Button/Button.module.scss?f17a","components/Button/Button.jsx","components/Navbar/NavbarMenu/items.js","webpack://project1/./src/components/Navbar/NavbarMenu/NavbarMenu.module.scss?4912","components/Navbar/NavbarMenu/NavbarMenu.jsx","components/Navbar/NavbarAuth/items.js","webpack://project1/./src/components/Navbar/NavbarAuth/NavbarAuth.module.scss?e7fb","components/Navbar/NavbarAuth/NavbarAuth.jsx","webpack://project1/./src/components/Navbar/NavbarUser/NavbarUser.module.scss?4131","components/Navbar/NavbarUser/NavbarUser.jsx","webpack://project1/./src/components/Navbar/Navbar.module.scss?b554","components/Navbar/Navbar.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"Button\":\"Button_Button__XMdsc\"};","import scss from \"./Button.module.scss\"\nimport PropTypes from 'prop-types';\n\nexport const Button = ({style, text, \n  onClick\n}) => {\n  return (\n    <button \n    style={style}\n    className={scss.Button}\n    onClick={onClick}\n    >\n      {text}\n    </button>\n  );\n};\n\nButton.propTypes = {\n    onClick: PropTypes.func,\n  };","import { nanoid } from \"nanoid\";\n\nconst items = [\n    {id: nanoid(),\n    to: \"/contacts\",\n    text: \"Contacts\"\n},\n{id: nanoid(),\n    to: \"/users\",\n    text: \"Users\"\n},\n]\n\n\nexport default items;","// extracted by mini-css-extract-plugin\nexport default {\"navbarMenuList\":\"NavbarMenu_navbarMenuList__qUVo+\",\"link\":\"NavbarMenu_link__PZhOW\",\"active\":\"NavbarMenu_active__Uxr5r\",\"navbarMenuListItem\":\"NavbarMenu_navbarMenuListItem__1E8RD\"};","import items from \"./items\"\nimport { NavLink } from \"react-router-dom\"\nimport scss from \"./NavbarMenu.module.scss\"\n\nconst getClassName = ({isActive}) => {\n    return isActive ? `${scss.link} ${scss.active}` : `${scss.link}`;\n}\n\nexport default function NavbarMenu() {\n  return (\n    <ul className={scss.navbarMenuList}>\n        {items.map(({id, to, text}) => {\n            return (\n                <li className={scss.navbarMenuListItem} key={id}>\n                    <NavLink className={getClassName} to={to} end>{text}</NavLink>\n                </li>\n            )})\n        }\n    </ul>\n  )\n}","import { nanoid } from \"nanoid\";\n\nconst items = [\n    {id: nanoid(),\n    to: \"/register\",\n    text: \"Registration\"\n},\n    {id: nanoid(),\n    to: \"/login\",\n    text: \"Login\"\n},\n\n]\n\n\nexport default items;","// extracted by mini-css-extract-plugin\nexport default {\"navbarAuthList\":\"NavbarAuth_navbarAuthList__uq7f4\",\"link\":\"NavbarAuth_link__uB6Cb\",\"active\":\"NavbarAuth_active__uFY6G\",\"navbarAuthListItem\":\"NavbarAuth_navbarAuthListItem__lWQZW\"};","import items from \"./items\"\nimport { NavLink } from \"react-router-dom\"\nimport scss from \"./NavbarAuth.module.scss\"\n\nconst getClassName = ({isActive}) => {\n    return isActive ? `${scss.link} ${scss.active}` : `${scss.link}`;\n}\n\nexport default function NavbarAuth() {\n  return (\n    <ul className={scss.navbarAuthList}>\n        {items.map(({id, to, text}) => {\n            return (\n                <li className={scss.navbarAuthListItem} key={id}>\n                    <NavLink className={getClassName} to={to} end>{text}</NavLink>\n                </li>\n            )})\n        }\n    </ul>\n  )\n}","// extracted by mini-css-extract-plugin\nexport default {\"navbarUser\":\"NavbarUser_navbarUser__qA+4s\",\"navbarUserName\":\"NavbarUser_navbarUserName__2jqzv\"};","import { useDispatch, useSelector } from \"react-redux\"\nimport { logout } from \"redux/auth/auth-operation\"\nimport scss from \"./NavbarUser.module.scss\"\nimport { getUser } from \"redux/auth/auth-selector\";\nimport { Button } from \"components/Button/Button\";\n\n\nexport default function NavbarUser() {\nconst user = useSelector(getUser)\n\nconst dispatch = useDispatch();\nconst onLogout =() => {\n    dispatch(logout())\n}\n\nconsole.log(user)\n\nconst chekName = Boolean(user)\n  return (\n    <div className={scss.navbarUser}>\n      {chekName ? <p className={scss.navbarUserName}>\n        <img src={user.avatarURL} alt=\"avatar\" />\n        Welcome, <b>{user.name}</b></p> : <p>Welcome, <b>User</b></p> }\n        <Button \n        style={{\n          position: 'absolute',\n          right: '0px',\n          height: '25px',\n          padding: '0px 0px',\n          minWidth: '100px',\n          fontSize: 15,\n          color: '#010101'\n        }}\n    \n      text=\"Logout\"\n      type=\"button\"\n      onClick={onLogout}\n      />\n    </div>\n  )\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"navbarMenu\":\"Navbar_navbarMenu__RH5i-\",\"navbarList\":\"Navbar_navbarList__wJY-l\"};","import NavbarMenu from \"components/Navbar/NavbarMenu/NavbarMenu\"\nimport NavbarAuth from \"components/Navbar/NavbarAuth/NavbarAuth\"\nimport NavbarUser from \"./NavbarUser/NavbarUser\"\nimport scss from \"./Navbar.module.scss\"\nimport UseAuth from \"components/hooks/useAuth\"\n\nexport default function Navbar() {\n  const isUserLogin = UseAuth()\n  return (\n    <nav className={scss.navbarMenu}>\n        <div className={scss.navbarList}>\n          {isUserLogin &&  <NavbarMenu />}\n           {isUserLogin ? <NavbarUser /> : <NavbarAuth />}\n        </div>\n    \n    </nav>\n  )\n}","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["Button","style","text","onClick","className","scss","id","nanoid","to","getClassName","isActive","NavbarMenu","items","end","NavbarAuth","NavbarUser","user","useSelector","getUser","dispatch","useDispatch","console","log","chekName","Boolean","src","avatarURL","alt","name","position","right","height","padding","minWidth","fontSize","color","type","logout","Navbar","isUserLogin","UseAuth","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase"],"sourceRoot":""}