{"version":3,"file":"static/js/828.6540470d.chunk.js","mappings":"kRAIaA,GAASC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,8B,SCMJ,SAASE,IAEpB,IAAMC,GAAOC,EAAAA,EAAAA,IAAYC,EAAAA,IAEzBC,QAAQC,IAAIJ,GACZ,IAAMK,EAAWC,QAAQN,GAEnBO,GAAWC,EAAAA,EAAAA,MACrB,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KAIMC,GAAaC,EAAAA,EAAAA,MACnBV,QAAQC,IAAIM,GAEZ,IAuCMI,EAAU,mCAAG,WAAMC,GAAN,wEACXC,EAAW,IAAIC,UACZC,OAAO,WAAYH,GAC5BR,GAASY,EAAAA,EAAAA,IAAWH,IAHH,2CAAH,sDAad,OACE,iCACA,SAACpB,EAAD,CACAwB,GAAI,SACJC,KAAG,EAFH,oBAIA,yBAAMhB,GAAW,0BACjB,gBAAKiB,IAAKtB,EAAKuB,QAASC,IAAI,WADX,aAER,uBAAIxB,EAAKU,WAAgB,sCAAY,sCAG1C,kBACAe,QAAS,SAAAC,GAAC,OAAIA,EAAEC,iBAAN,EACVC,SArDmB,SAACF,GACpBA,EAAEG,iBAQEtB,GAASY,EAAAA,EAAAA,IACR,CAACT,KAAAA,IAEE,EAuCR,WAIA,4BACE,kBAAOoB,QAASlB,EAAhB,uBACA,kBAEAmB,GAAInB,EACJoB,KAAK,OACLtB,KAAK,OACLuB,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,EACRC,aAAcpC,EAAKU,KACnB2B,SA9EW,SAACX,GACpB,IAAQhB,EAASgB,EAAEY,cAAX5B,KAEF,GADNP,QAAQC,IAAIM,GAEC,SADCA,EAEJC,EAAUe,EAAEY,cAAcC,MAK/B,QAuEC,mBACAP,KAAK,SADL,wBAIA,kBACAQ,QAAQ,sBACRC,OAAO,OACPhB,QAAS,SAAAC,GAAC,OAAIA,EAAEC,iBAAN,EAHV,WAME,kBAEAI,GAAInB,EACJoB,KAAK,OACLtB,KAAK,OACLgC,OAAO,8CACPL,SAnDiB,SAAAX,GACzB,IAAMX,EAAaW,EAAEiB,OAAOC,MAAM,GAClCzC,QAAQC,IAAIW,GACZD,EAAWC,EACZ,KAsDO,mBACAiB,KAAK,SADL,8BAKP,C,wDCrID,IAkBInB,EAAS,WAGX,IAH0B,IAAdgC,EAAc,uDAAP,GACfd,EAAK,GACLe,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWJ,IAC3CA,KAAQ,CACb,IAAIK,EAAqB,GAAdJ,EAAMD,GAEfd,GADEmB,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAET,CACD,OAAOnB,CACR,C","sources":["Pages/Users/Users.styled.jsx","Pages/Users/Users.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from 'styled-components';\nimport { NavLink } from \"react-router-dom\"\n\n\nexport const GoBack = styled(NavLink) `\n    \n`","import {  useSelector, useDispatch } from \"react-redux\"\nimport { useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport { getUser } from \"redux/auth/auth-selector\";\nimport { userUpdate } from \"redux/auth/auth-operation\";\n// import { Navigate } from \"react-router-dom\"\nimport { GoBack } from \"./Users.styled\";\n// import { Notify } from 'notiflix/build/notiflix-notify-aio';\n// import { Formik } from 'formik';\n\nexport default function Users() {\n\n    const user = useSelector(getUser)\n    // const users = useSelector(getAllUser)\n    console.log(user)\n    const chekName = Boolean(user)\n\n    const dispatch = useDispatch();\nconst [name, setName] = useState('');\n// const [onAddFile, setOnAddFile] = useState(null);\n// const [preview, setPreview] = useState('');\n\nconst userNameID = nanoid();\nconsole.log(name)\n\nconst handleChange = (e) => {\n  const { name } = e.currentTarget;\n  console.log(name)\n        switch (name) {\n          case 'name':\n            setName ( e.currentTarget.value);\n            break;\n          default:\n            break;\n        }\n      };\n\n      const handleSubmit = (e) => {\n        e.preventDefault();\n        // const duplicateUsers = user.find(user => user.name.toLocaleLowerCase() === name.toLocaleLowerCase());\n      //       if (duplicateUsers) {\n      //       Notify.failure(`${name} is already in use`)\n      //       return\n      // }\n      // else {\n\n            dispatch(userUpdate(\n             {name}\n              )\n              )}\n            // }\n// const click = (e) => {\n//   // e.preventDefault();\n//   dispatch(allUsers( ) )\n// }\n\n// const handleChangeAvatar = e => {\n//   setOnAddFile(e.currentTarget.files[0]);\n//   const reader = new FileReader();\n//   reader.onload = function (e) {\n//     setPreview(e.target.result);\n//   };\n//   reader.readAsDataURL(e.currentTarget.files[0]);\n// }\nconst UploadFile = async fileSelect => {\n  const imageURL = new FormData();\n  imageURL.append('imageURL', fileSelect);\n  dispatch(userUpdate(imageURL));\n  // setchangePhoto(true);\n};\n\nconst handleChangeUpload = e => {\n  const fileSelect = e.target.files[0];\n  console.log(fileSelect)\n  UploadFile(fileSelect);\n};\n\n  return (\n    <>\n    <GoBack\n    to={\"/items\"} \n    end\n    >Close</GoBack>\n    <div>{chekName ? <p>\n    <img src={user.logoURL} alt=\"avatar\" />\n    Welcome, <b>{user.name}</b></p> : <p>Welcome, <b>User</b></p> }</div>\n\n\n        <form \n        onClick={e => e.stopPropagation()}\n        onSubmit={handleSubmit}\n        >\n        <div>\n          <label htmlFor={userNameID}>UserName</label>\n          <input \n          // className={scss.formInputName}\n          id={userNameID} \n          type=\"text\" \n          name=\"name\" \n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          defaultValue={user.name} \n          onChange={handleChange} />\n        </div>\n        \n        <button \n        type=\"submit\">Change</button>\n        </form>\n        \n        <form \n        encType=\"multipart/form-data\" \n        method=\"post\"\n        onClick={e => e.stopPropagation()}\n        // onSubmit={handleChangeUpload}\n        >\n          <input \n          \n          id={userNameID} \n          type=\"file\" \n          name=\"logo\" \n          accept=\"image/png, image/jpeg, image/jpg, image/bmp\"\n          onChange={handleChangeUpload}\n          // required\n          // defaultValue={user.avatarURL} \n          // onChange={handleChangeAvatar} \n          />\n      \n        \n        <button \n        type=\"submit\">Change Logo</button>\n        </form>\n    </>\n  )\n}\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["GoBack","styled","NavLink","Users","user","useSelector","getUser","console","log","chekName","Boolean","dispatch","useDispatch","useState","name","setName","userNameID","nanoid","UploadFile","fileSelect","imageURL","FormData","append","userUpdate","to","end","src","logoURL","alt","onClick","e","stopPropagation","onSubmit","preventDefault","htmlFor","id","type","pattern","title","required","defaultValue","onChange","currentTarget","value","encType","method","accept","target","files","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase"],"sourceRoot":""}