{"version":3,"file":"static/js/909.ac078056.chunk.js","mappings":"8PAGaA,EAAOC,EAAAA,GAAAA,IAAH,mMAWJC,EAAQD,EAAAA,GAAAA,GAAH,sKAQLE,EAAUF,EAAAA,GAAAA,IAAH,6DAKPG,EAAWH,EAAAA,GAAAA,GAAH,gPAWRI,EAAYJ,EAAAA,GAAAA,IAAH,+CAGTK,EAAOL,EAAAA,GAAAA,KAAH,gD,SCkBjB,I,EAAA,EAhDA,YAA8C,IAAjBM,EAAgB,EAAhBA,QAASC,EAAO,EAAPA,KAM9BC,EAAU,CACd,CACEC,IAJAH,EADFI,SAMEC,KAAMJ,IAKV,OAII,8BACaC,EAAQI,KAAI,SAAAC,GAAC,OAClB,UAACd,EAAD,YAEE,SAACE,EAAD,UACgBY,EAAEJ,MAAbK,EAAAA,EAAAA,OACJD,EAAEF,KAAKC,KAAI,SAAAD,GAAI,OAChB,UAACR,EAAD,gBAGE,UAACC,EAAD,YACA,UAACC,EAAD,iBAAQ,uBAAIM,EAAKI,eACjB,UAACV,EAAD,iBAAQ,uBAAIM,EAAKK,kBACjB,UAACX,EAAD,YAAM,iCAAN,MAAoB,yBAAIM,EAAKM,MAAT,cAEpB,SAACf,EAAD,CAASgB,IAAKP,EAAKQ,SAAWC,EAAOC,IAAI,MAAMC,QAAQ,YAPpDR,EAAAA,EAAAA,MAFW,OAHbA,EAAAA,EAAAA,MAFa,KA2B/B,E,8BCtDYf,EAAOC,EAAAA,GAAAA,GAAH,0BCYF,SAASuB,IAGtB,IACMb,GADWc,EAAAA,EAAAA,MACUC,SAASC,MAAM,KAAK,GAEvCC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IACvBC,GAAQF,EAAAA,EAAAA,IAAYG,EAAAA,IAiB5B,OAhBFC,QAAQC,IAAIH,IACRI,EAAAA,EAAAA,YAAU,WAENT,GAASU,EAAAA,EAAAA,MACL3B,IACFiB,GAASW,EAAAA,EAAAA,IAAe5B,IACxBiB,GAASY,EAAAA,EAAAA,IAAc7B,IAI1B,GAED,CAACiB,EAAUjB,KAKb,+BAUA,SAAC,EAAD,UACImB,EAASjB,KAAI,SAAAN,GAAO,OACpB,SAAC,EAAD,CAEAA,QAASA,EACTC,KAAMyB,EAAMQ,QAAO,SAAAC,GAAC,OAClBA,EAAEnC,UAAYA,EAAQoC,GADJ,MAFf5B,EAAAA,EAAAA,MAFe,MADbA,EAAAA,EAAAA,QAYd,C,wJC/DM,IAAM6B,EAAW,SAAC,GAAD,SAAEX,MAAiBA,KAAnB,EACXC,EAAe,SAAC,GAAD,SAAED,MAAiBY,SAAnB,EACfC,EAAS,SAAC,GAAD,SAAEb,MAAiBa,MAAnB,EACTC,EAAqB,SAAC,GAAD,SAAEd,MAAmBe,eAArB,EAErBC,EAAW,SAAC,GAAD,IAAEhB,EAAF,EAAEA,MAAF,MAAc,CAACV,QAASU,EAAMV,QAAS2B,MAAOjB,EAAMiB,MAApD,C,wDCLjB,IAAMlB,EAAc,SAAC,GAAD,SAAEF,SAAyBA,QAA3B,C,w1ICAZ,SAASqB,EAAuBC,EAASC,GAKtD,OAJKA,IACHA,EAAMD,EAAQE,MAAM,IAGfC,OAAOC,OAAOD,OAAOE,iBAAiBL,EAAS,CACpDC,IAAK,CACHK,MAAOH,OAAOC,OAAOH,MAG3B,C,uFCTA,IAkBItC,EAAS,WAGX,IAH0B,IAAd4C,EAAc,uDAAP,GACfC,EAAK,GACLC,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWL,IAC3CA,KAAQ,CACb,IAAIM,EAAqB,GAAdJ,EAAMF,GAEfC,GADEK,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAET,CACD,OAAOL,CACR,C","sources":["components/Live/LiveItemsSections/LiveItemsSections.styled.jsx","components/Live/LiveItemsSections/LiveItemsSections.jsx","Pages/LivePage/LivePage.styled.jsx","Pages/LivePage/LivePage.jsx","redux/items/items-selector.js","redux/sections/sections-selector.js","../node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from 'styled-components';\n\n\nexport const List = styled.div`\ntext-align: center;\n/* align-items: center;\n  justify-content: center;\n  margin-left:auto;\n  margin-right: auto;\n  \n  /* display: flex; */\n  /* margin: 0 auto; */\n`\n\nexport const Title = styled.h2`\n  /* align-items: center; */\n   /* justify-content: center; */\n   /* text-align: center; */\n   margin-top: auto;\n   margin-bottom: auto;\n`\n\nexport const ImgLive = styled.img`\n  width: 100px;\n  height: 100px;\n\n`\nexport const ItemList = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-left:auto;\n  margin-right: auto;\n  text-align: center;\n  width: 500px;\n  border-radius: 10px;\n  border: 1px solid rgb(7, 94, 138);\n`;\nexport const ItemsText = styled.div`\n  /* display:flex; */\n`\nexport const Item = styled.span`\n  /* display: flex; */\n`\n","import { nanoid } from 'nanoid';\nimport noimg from 'img/noimg.jpg'\nimport {List, \n  // ListLive,\n   Title, ImgLive, ItemList, ItemsText, Item} from './LiveItemsSections.styled'\n\n// const btnId = nanoid();\n// const sectionId = nanoid();\n\n\n\nfunction LiveItemsSections ({section, item}) {\n \n  const { \n    category,\n  } = section;\n  \n  const buttons = [\n    {\n      btn: category,\n      list: item,\n    }\n  \n  ];\n  \n  return (\n   \n      // <ListLive key={nanoid()}>     // </ListLive>\n\n      <>\n                  {buttons.map(b => (\n              <List\n              key={nanoid()}>\n                <Title\n                key={nanoid()}>{b.btn}</Title> \n                {b.list.map(list => (\n                <ItemList \n                key={nanoid()}\n                \n                > <ItemsText>\n                  <Item>  <p>{list.itemName}</p></Item>\n                  <Item>  <p>{list.description}</p></Item>\n                  <Item><p>Price</p>  <p>{list.price} </p></Item>\n                  </ItemsText>\n                  <ImgLive src={list.itemImg || noimg} alt=\"img\" loading='lazy' />\n                  \n                  \n                  </ItemList>\n                ))}\n              </List>\n              \n              )\n              \n              )}\n       </>     \n  \n  );\n}\n\nexport default LiveItemsSections;\n","import styled from 'styled-components';\n\n\nexport const List = styled.ul`\n\n`","// import {  getAllUser } from \"redux/user/user-selector\";\nimport {  useDispatch,useSelector } from \"react-redux\";\nimport React, { useEffect } from \"react\";\nimport {  allUsers } from \"redux/user/user-operation\";\n// import LiveListUser from \"components/Live/LiveListUser/LIveListUser\";\nimport { nanoid } from 'nanoid';\nimport { getSections } from \"redux/sections/sections-selector\"\nimport { fetchSections } from \"redux/sections/sections-operation\"\nimport LiveItemsSections from \"components/Live/LiveItemsSections/LiveItemsSections\";\nimport { useLocation } from 'react-router-dom'\nimport {  fetchItemsLive } from \"redux/items/items-operation\"\nimport { getItemsLive } from 'redux/items/items-selector';\nimport { List } from \"./LivePage.styled\";\n\n\nexport default function LivePage() {\n\n\n  const location = useLocation();\n  const category = (location.pathname.split('/')[2])\n  \n    const dispatch = useDispatch();\n    const sections = useSelector(getSections);\n    const items = useSelector(getItemsLive);\nconsole.log(items)\n    useEffect(() => {\n      \n        dispatch(allUsers())\n        if (category) {\n          dispatch(fetchItemsLive(category));\n          dispatch(fetchSections(category));\n        }\n        \n        \n      }, \n\n      [dispatch, category])\n\n\n  \n  return (\n    <>\n    \n    {/* <ul key={nanoid()}>\n          {users.map(user =>\n           <LiveListUser\n           user={user}\n          //  sections={sections}\n           ></LiveListUser>\n            ) } \n    </ul> */}\n    <List key={nanoid()}>\n       {sections.map(section =>\n        <LiveItemsSections\n        key={nanoid()}\n        section={section}\n        item={items.filter(i => \n          i.section === section._id)}\n        />  )\n}\n    </List>\n      </>\n  )\n}\n","export const getItems = ({items}) => items.items;\nexport const getItemsLive = ({items}) => items.itemsLive;\nexport const isLive = ({items}) => items.isLive;\nexport const getItemsByCategory = ({items}) => ( items.itemsByCategory);\nexport const getItemUpdate = ({items}) => (items.itemsByCategory);\nexport const getState = ({items}) => ({loading: items.loading, error: items.error});\nexport const getFilteredItems = ({filter, items}) => {   \n    if (!filter) \n    {return items.items};\n};","export const getSections = ({sections}) => ( sections.sections)\nexport const getSectionsLive = ({sectionsLive}) => ( sectionsLive.sections)\nexport const getState = ({sections}) => ({loading: sections.loading, error: sections.error});","export default function _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["List","styled","Title","ImgLive","ItemList","ItemsText","Item","section","item","buttons","btn","category","list","map","b","nanoid","itemName","description","price","src","itemImg","noimg","alt","loading","LivePage","useLocation","pathname","split","dispatch","useDispatch","sections","useSelector","getSections","items","getItemsLive","console","log","useEffect","allUsers","fetchItemsLive","fetchSections","filter","i","_id","getItems","itemsLive","isLive","getItemsByCategory","itemsByCategory","getState","error","_taggedTemplateLiteral","strings","raw","slice","Object","freeze","defineProperties","value","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase"],"sourceRoot":""}