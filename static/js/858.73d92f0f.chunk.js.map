{"version":3,"file":"static/js/858.73d92f0f.chunk.js","mappings":"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","sources":["Pages/Registration/Registration.styled.jsx","Pages/Registration/Registration.jsx","components/Button/Button.styled.jsx","components/common/GeneralStyle/Input.styled.jsx","components/common/GeneralStyle/LogRegButton.styled.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from 'styled-components';\nimport { device } from 'Device';\nimport { TextBtn } from 'components/Button/Button.styled';\n\nexport const RegForm = styled.form`\n    margin-top: 70px;\n    width:100%;\n    @media ${device.tablet} {\n        margin-top: 10px;\n         }\n         @media ${device.desktop} {\n        margin-top: 100px;\n         }\n`\n\nexport const RegistrationPage = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n`\n\n\n    \n\nexport const RegistrationFormList = styled.div`\n    display: block;\n    /* align-items: center; */\n    &:not(:first-child) {\n        margin-top: 30px;\n    }\n    @media ${device.tablet} {\n        &:not(:first-child) {\n        margin-top: 10px;\n    }\n         }\n`\nexport const RegistrationFormWrapper = styled.div`\n    \n`\nexport const RegistrationFormLabel = styled.label`\ndisplay: block;\n    color: white;\n    @media ${device.mobile} {\n        font-size: 20px;\n    }\n    @media ${device.tablet} {\n        font-size: 18px;\n    }\n`\n\nexport const TextButton = styled(TextBtn)`\n    \n`","import { useState } from 'react';\nimport { nanoid } from \"nanoid\";\nimport { useDispatch, \n  useSelector\n } from \"react-redux\";\nimport { register } from 'redux/auth/auth-operation';\nimport { \n  RegForm,\n  RegistrationPage,\n  RegistrationFormLabel, \n  RegistrationFormList,\n  RegistrationFormWrapper,\n  TextButton,\n } from './Registration.styled';\n import { LogRegInput } from 'components/common/GeneralStyle/Input.styled';\nimport { ButtonLogReg } from 'components/common/GeneralStyle/LogRegButton.styled';\n// import { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { isRegister } from 'redux/auth/auth-selector';\nimport { Navigate } from 'react-router-dom';\n// import { Modal } from 'components/Modal/Modal';\n// import ModalRegisterVerify from 'components/ModalRegisterVerify/ModalRegisterVerify';\n\nexport default function Registration() {\n\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  // const [modalActive, setModalActive] = useState('');\n\n  const nameId = nanoid();\n    const emailId = nanoid();\n    const passwordId = nanoid();\n\n  const dispatch = useDispatch();\n  const isUserRegister = useSelector(isRegister);\n\n  const handleChange = (event) => {\n    const { name, value } = event.currentTarget;\n\n    switch (name) {\n        case 'name':\n            setName(value);\n            break;\n        case 'email':\n            setEmail(value);\n            break;\n        case 'password':\n            setPassword(value);\n            break;\n        default:\n            setName('');\n            setEmail('');\n            setPassword('');\n    };\n};\n\nconst handleSubmit = (e) => {\n    e.preventDefault();\n    // console.log(\"reg\")\n    dispatch(register({ name: name, email: email, password: password }));    \n};\n\n// const openModal = () => {\n//   if (isUserRegister) {\n  \n//     //  return console.log(\"userRegister\")\n//       setModalActive(true)\n//     ;}\n//     else {\n//       console.log(\"enter name\")\n//     }\n// }\nif (isUserRegister) {\n  return <Navigate to=\"/register/verify\" />\n//  return console.log(\"userRegister\")\n\n  // setModalActive(true)\n;}\n\n  return (\n    <RegistrationPage>\n       \n       <RegForm\n       onSubmit={handleSubmit}>\n        <RegistrationFormWrapper>\n       <RegistrationFormList >\n  \n              <RegistrationFormLabel \n            htmlFor={nameId}\n            >Login </RegistrationFormLabel>\n          \n            <LogRegInput \n            id={nameId} placeholder=\"Enter name\" name=\"name\" type=\"text\" required onChange={handleChange} value={name}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n             />\n        </RegistrationFormList>\n        <RegistrationFormList >\n            <RegistrationFormLabel \n            htmlFor={emailId}\n            >E-mail </RegistrationFormLabel>\n            <LogRegInput \n            id={emailId} placeholder=\"Enter email\" name=\"email\" type=\"email\" required onChange={handleChange} value={email}\n            pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$\"\n             />\n        </RegistrationFormList>\n        <RegistrationFormList >\n            <RegistrationFormLabel \n            htmlFor={passwordId}\n            >Password </RegistrationFormLabel>\n            \n            <LogRegInput \n            id={passwordId} placeholder=\"Enter password\" name=\"password\" type=\"password\" required onChange={handleChange} value={password}\n             />\n        </RegistrationFormList>\n        </RegistrationFormWrapper>\n        {/* <Button \n         style={{\n          height: '35px',\n        }}\n        text=\"Registration\"\n        type=\"submit\"\n        /> */}\n        <ButtonLogReg\n        type=\"submit\"\n        >\n<TextButton>Registration</TextButton>\n        </ButtonLogReg>\n       </RegForm>\n      \n\n  \n       \n       </RegistrationPage>\n  )\n}\n","import styled from 'styled-components';\n\nexport const Btn = styled.button`\n  padding: 0px 10px;\n  background-color: ${props => props.theme.colors.btn};\n    transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    border: none;\n    border-radius: 10px;\n    text-decoration: none;\n    cursor: pointer;\n    font-family: inherit;\n    /* font-weight: 800; */\n    min-width: 100px;\n    height: 25px;\n    box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2),\n      0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);\n      &:hover,\n       &:focus {\n        background-color: ${props => props.theme.colors.btnActive};\n        cursor: pointer;\n  }\n` \nexport const TextBtn = styled.p`\n  color: ${props => props.theme.colors.mainTextBtn};\n  font-size: 15px;\n  font-weight: 800;\n  /* line-height: 24px; */\n  /* font-style: normal; */\n\n`\n  \n  ","import styled from 'styled-components';\nimport { device } from 'Device';\n\nexport const LogRegInput = styled.input`\n    box-sizing: border-box;\npadding-left: 10px;\n border-radius: 5px;\n border: none;\n box-shadow: 7px 20px 14px rgba(10, 4, 1, 0.5);\n &:focus, &:hover  {\n    \n    outline: 2px solid #F59256;\n }\n @media ${device.mobile} {\n    margin-top: 5px;\n    width: 300px;\n    height: 50px;\n    }\n    @media ${device.tablet} {\n        height: 40px;\n    }\n    @media ${device.desktop} {\n        margin-top: 10px;\n        width: 350px;\n        height: 50px;\n}\n`\nexport const Form = styled.form`\n font-size: 25px;\n    border: 1px solid rgb(7, 94, 138);\n    border-radius: 5px;\n    padding: 30px 10px 10px 10px;\n    width: 300px;\n    background-color: #919191;\n`\n   \nexport const FormInputList = styled.div`\n    display: flex;\n    flex-direction: column;\n    &:not(:first-child) {\n    margin-top: 10px;\n}\n    \n`\nexport const FormInputLabel = styled.label`\nfont-size: 25px;\nfont-family: inherit;\n\n\n`\nexport const FormInput = styled.input`\nfont-family: 'Times New Roman', Times, serif;\nfont-size: 17px;\nmargin-top: 10px;\n    padding-left: 10px;\n    max-width: 100%;\n    height: 30px;\n    border-radius: 5px;\n    border: 1px solid #749574;\n    /* &:focus, &:hover  {\n    outline: 2px solid #F59256;\n } */\n`\nexport const FormInputDescription = styled.textarea`\nfont-family: 'Times New Roman', Times, serif;\nfont-size: 17px;\nmargin-top: 10px;\n    padding-left: 10px;\n    max-width: 100%;\n    height: 100px;\n    border-radius: 5px;\n    border: 1px solid #749574;\n    /* &:focus, &:hover  {\n    outline: 2px solid #F59256;\n } */\n`\nexport const FormInputSection = styled.input`\nfont-family: 'Times New Roman', Times, serif;\nfont-size: 17px;\n    background-color: #FFF;\n    padding-left: 10px;\n    width: 170px;\n    height: 30px;\n    border-radius: 5px;\n    border: 1px soloid #749574;\n      &:focus, &:hover  {\n    outline: none;\n }\n`\nexport const LabelName = styled.p`\n    font-size: 20px;\n    font-family: Inter, sans-serif;\n`","import styled from 'styled-components';\nimport { device } from 'Device';\nimport { Btn } from 'components/Button/Button.styled';\n\n\n\nexport const ButtonLogReg = styled(Btn)`\n      @media ${device.mobile} {\n        margin-top: 70px;\n    width: 100%;\n    height: 50px;\n    }\n    @media ${device.tablet} {\n        margin-top: 30px;\n        width: 300px;\n}\n@media ${device.desktop} {\n        margin-top: 40px;\n        width: 350px;\n}\n`","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["RegForm","styled","form","_templateObject","_taggedTemplateLiteral","device","tablet","desktop","RegistrationPage","div","_templateObject2","RegistrationFormList","_templateObject3","RegistrationFormWrapper","_templateObject4","RegistrationFormLabel","label","_templateObject5","mobile","TextButton","TextBtn","_templateObject6","Registration","_useState","useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","email","setEmail","_useState5","_useState6","password","setPassword","nameId","nanoid","emailId","passwordId","dispatch","useDispatch","handleChange","event","_event$currentTarget","currentTarget","value","useSelector","isRegister","_jsx","Navigate","to","children","_jsxs","onSubmit","e","preventDefault","register","htmlFor","LogRegInput","id","placeholder","type","required","onChange","pattern","ButtonLogReg","Btn","button","props","theme","colors","btn","btnActive","p","mainTextBtn","input","Form","FormInputList","FormInputLabel","FormInput","FormInputDescription","textarea","FormInputSection","_templateObject7","LabelName","_templateObject8","size","arguments","length","undefined","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}