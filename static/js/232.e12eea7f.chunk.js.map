{"version":3,"file":"static/js/232.e12eea7f.chunk.js","mappings":"+NAQe,SAASA,IAEpB,IAAMC,GAAOC,EAAAA,EAAAA,IAAYC,EAAAA,IAEzBC,QAAQC,IAAIJ,GACZ,IAAMK,EAAWC,QAAQN,GAEnBO,GAAWC,EAAAA,EAAAA,MACrB,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KAEMC,GAAaC,EAAAA,EAAAA,MACnBV,QAAQC,IAAIM,GAgCV,OACE,iCACA,yBAAML,GAAW,0BACjB,gBAAKS,IAAKd,EAAKe,UAAWC,IAAI,WADb,aAER,uBAAIhB,EAAKU,WAAgB,sCAAY,sCAGlD,iBACQO,QAAS,SAAAC,GAAC,OAAIA,EAAEC,iBAAN,EAEVC,SA5BmB,SAACF,GACpBA,EAAEG,iBAQEd,GAASe,EAAAA,EAAAA,IACR,CAACZ,KAAAA,IAEE,EAahB,UAMU,iCACF,4BAGE,kBAAOa,QAASX,EAAhB,uBACA,kBAEAY,GAAIZ,EACJa,KAAK,OACLf,KAAK,OACLgB,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,EACRC,aAAc7B,EAAKU,KACnBoB,SAzDW,SAACZ,GACpB,IAAQR,EAASQ,EAAEa,cAAXrB,KAEF,GADNP,QAAQC,IAAIM,GAEC,SADCA,EAEJC,EAAUO,EAAEa,cAAcC,MAK/B,QAkDC,mBAGAP,KAAK,SAHL,2BAaP,C,wDC7FD,IAkBIZ,EAAS,WAGX,IAH0B,IAAdoB,EAAc,uDAAP,GACfT,EAAK,GACLU,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWJ,IAC3CA,KAAQ,CACb,IAAIK,EAAqB,GAAdJ,EAAMD,GAEfT,GADEc,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAET,CACD,OAAOd,CACR,C","sources":["Pages/Users/Users.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import {  useSelector, useDispatch } from \"react-redux\"\nimport { useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport { getUser } from \"redux/auth/auth-selector\";\nimport { userUpdate } from \"redux/auth/auth-operation\";\n// import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n\nexport default function Users() {\n\n    const user = useSelector(getUser)\n    // const users = useSelector(getAllUser)\n    console.log(user)\n    const chekName = Boolean(user)\n\n    const dispatch = useDispatch();\nconst [name, setName] = useState('');\n\nconst userNameID = nanoid();\nconsole.log(name)\n\nconst handleChange = (e) => {\n  const { name } = e.currentTarget;\n  console.log(name)\n        switch (name) {\n          case 'name':\n            setName ( e.currentTarget.value);\n            break;\n          default:\n            break;\n        }\n      };\n\n      const handleSubmit = (e) => {\n        e.preventDefault();\n        // const duplicateUsers = user.find(user => user.name.toLocaleLowerCase() === name.toLocaleLowerCase());\n      //       if (duplicateUsers) {\n      //       Notify.failure(`${name} is already in use`)\n      //       return\n      // }\n      // else {\n\n            dispatch(userUpdate(\n             {name}\n              )\n              )}\n            // }\n// const click = (e) => {\n//   // e.preventDefault();\n//   dispatch(allUsers( ) )\n// }\n  return (\n    <>\n    <div>{chekName ? <p>\n    <img src={user.avatarURL} alt=\"avatar\" />\n    Welcome, <b>{user.name}</b></p> : <p>Welcome, <b>User</b></p> }</div>\n\n\n<form \n        onClick={e => e.stopPropagation()}\n        // className={scss.form}\n        onSubmit={handleSubmit}\n        \n        >\n          <>\n        <div \n        // className={scss.formInput}\n        >\n          <label htmlFor={userNameID}>UserName</label>\n          <input \n          // className={scss.formInputName}\n          id={userNameID} \n          type=\"text\" \n          name=\"name\" \n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          defaultValue={user.name} \n          onChange={handleChange} />\n        </div>\n        \n        <button \n        // onClick={values => handleSubmit(values)}\n        // className={scss.formBtn}\n        type=\"submit\">Change</button>\n         {/* <button \n        onClick={() => click()}\n        \n        >Userssss</button> */}\n        </>\n        </form>\n\n    </>\n  )\n}\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["Users","user","useSelector","getUser","console","log","chekName","Boolean","dispatch","useDispatch","useState","name","setName","userNameID","nanoid","src","avatarURL","alt","onClick","e","stopPropagation","onSubmit","preventDefault","userUpdate","htmlFor","id","type","pattern","title","required","defaultValue","onChange","currentTarget","value","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase"],"sourceRoot":""}