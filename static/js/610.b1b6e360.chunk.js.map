{"version":3,"file":"static/js/610.b1b6e360.chunk.js","mappings":"2MACA,EAAmC,uCAAnC,EAAkG,4CAAlG,EAAiK,uCAAjK,EAAgO,4C,kBCSjN,SAASA,IAEtB,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAgCJ,EAAAA,EAAAA,UAAS,IAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KAEMC,GAASC,EAAAA,EAAAA,MACPC,GAAUD,EAAAA,EAAAA,MACVE,GAAaF,EAAAA,EAAAA,MAEfG,GAAWC,EAAAA,EAAAA,MAGXC,EAAe,SAACC,GACpB,MAAwBA,EAAMC,cAAtBd,EAAR,EAAQA,KAAMe,EAAd,EAAcA,MAEd,OAAQf,GACJ,IAAK,OACDC,EAAQc,GACR,MACJ,IAAK,QACDZ,EAASY,GACT,MACJ,IAAK,WACDV,EAAYU,GACZ,MACJ,QACId,EAAQ,IACRE,EAAS,IACTE,EAAY,IAEvB,EAYC,OACE,iBAAKW,UAAWC,EAAhB,WACG,+CACA,kBACAC,SAdc,SAACC,GAClBA,EAAEC,iBACFC,QAAQC,IAAI,OACZZ,GAASa,EAAAA,EAAAA,IAAS,CAAEvB,KAAMA,EAAME,MAAOA,EAAOE,SAAUA,IAC3D,EASM,WAEA,iBAAKY,UAAWC,EAAhB,WACM,iBAAKD,UAAWC,EAAhB,eAA6C,kBAC9CO,QAASlB,EADqC,wBAG9C,kBACAU,UAAWC,EACXQ,GAAInB,EAAQoB,YAAY,aAAa1B,KAAK,OAAO2B,KAAK,OAAOC,UAAQ,EAACC,SAAUjB,EAAcG,MAAOf,EACrG8B,QAAQ,+HAGZ,iBAAKd,UAAWC,EAAhB,WACK,gBAAKD,UAAWC,EAAhB,UAA4C,kBAC7CO,QAAShB,EADoC,wBAG7C,kBACAQ,UAAWC,EACXQ,GAAIjB,EAASkB,YAAY,cAAc1B,KAAK,QAAQ2B,KAAK,QAAQC,UAAQ,EAACC,SAAUjB,EAAcG,MAAOb,EACzG4B,QAAQ,iDAGZ,iBAAKd,UAAWC,EAAhB,WACK,gBAAKD,UAAWC,EAAhB,UAA4C,kBAC7CO,QAASf,EADoC,0BAG7C,kBACAO,UAAWC,EACXQ,GAAIhB,EAAYiB,YAAY,iBAAiB1B,KAAK,WAAW2B,KAAK,WAAWC,UAAQ,EAACC,SAAUjB,EAAcG,MAAOX,QAGzH,SAAC2B,EAAA,EAAD,CACAC,KAAK,eACLL,KAAK,gBAMZ,C,sDC9FD,MAAyB,uB,SCEZI,EAAS,SAAC,GAA4B,IAA3BE,EAA0B,EAA1BA,MAAOD,EAAmB,EAAnBA,KAAME,EAAa,EAAbA,QACnC,OACE,mBACAD,MAAOA,EACPjB,UAAWC,EACXiB,QAASA,EAHT,SAKGF,GAGN,C,wDCZD,IAkBIzB,EAAS,WAGX,IAH0B,IAAd4B,EAAc,uDAAP,GACfV,EAAK,GACLW,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWJ,IAC3CA,KAAQ,CACb,IAAIK,EAAqB,GAAdJ,EAAMD,GAEfV,GADEe,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAET,CACD,OAAOf,CACR,C","sources":["webpack://project1/./src/Pages/Registration/Registration.module.scss?d2b2","Pages/Registration/Registration.jsx","webpack://project1/./src/components/Button/Button.module.scss?f17a","components/Button/Button.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"registrationPage\":\"Registration_registrationPage__LoyTw\",\"registrationFormLabel\":\"Registration_registrationFormLabel__yHEip\",\"registrationForm\":\"Registration_registrationForm__Ff6xS\",\"registrationFormInput\":\"Registration_registrationFormInput__Lmv-L\"};","import { useState } from 'react';\nimport { nanoid } from \"nanoid\";\nimport { useDispatch, \n  // useSelector\n } from \"react-redux\";\nimport { register } from 'redux/auth/auth-operation';\nimport scss from \"./Registration.module.scss\"\nimport { Button } from 'components/Button/Button';\n\n\nexport default function Registration() {\n\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const nameId = nanoid();\n    const emailId = nanoid();\n    const passwordId = nanoid();\n\n  const dispatch = useDispatch();\n  // const isUserLogin = useSelector(isLogin);\n\n  const handleChange = (event) => {\n    const { name, value } = event.currentTarget;\n\n    switch (name) {\n        case 'name':\n            setName(value);\n            break;\n        case 'email':\n            setEmail(value);\n            break;\n        case 'password':\n            setPassword(value);\n            break;\n        default:\n            setName('');\n            setEmail('');\n            setPassword('');\n    };\n};\n\nconst handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(\"reg\")\n    dispatch(register({ name: name, email: email, password: password }));    \n};\n\n// if (isUserLogin) {\n//   return <Navigate to=\"/contacts\" />\n// ;}\n\n  return (\n    <div className={scss.registrationPage}>\n       <h1>Registration Form</h1> \n       <form\n       onSubmit={handleSubmit}>\n       <div className={scss.registrationForm}>\n            {<div className={scss.registrationFormLabel}> <label \n            htmlFor={nameId}\n            >Login </label></div>}\n            <input \n            className={scss.registrationFormInput}\n            id={nameId} placeholder=\"Enter name\" name=\"name\" type=\"text\" required onChange={handleChange} value={name}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n             />\n        </div>\n        <div className={scss.registrationForm}>\n            {<div className={scss.registrationFormLabel}><label \n            htmlFor={emailId}\n            >E-mail </label></div>}\n            <input \n            className={scss.registrationFormInput}\n            id={emailId} placeholder=\"Enter email\" name=\"email\" type=\"email\" required onChange={handleChange} value={email}\n            pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$\"\n             />\n        </div>\n        <div className={scss.registrationForm}>\n            {<div className={scss.registrationFormLabel}><label \n            htmlFor={passwordId}\n            >Password </label></div>}\n            <input \n            className={scss.registrationFormInput}\n            id={passwordId} placeholder=\"Enter password\" name=\"password\" type=\"password\" required onChange={handleChange} value={password}\n             />\n        </div>\n        <Button \n        text=\"Registration\"\n        type=\"button\"\n        />\n       </form>\n       \n       </div>\n  )\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"Button\":\"Button_Button__XMdsc\"};","import scss from \"./Button.module.scss\"\nimport PropTypes from 'prop-types';\n\nexport const Button = ({style, text, onClick}) => {\n  return (\n    <button \n    style={style}\n    className={scss.Button}\n    onClick={onClick}\n    >\n      {text}\n    </button>\n  );\n};\n\nButton.propTypes = {\n    onClick: PropTypes.func.isRequired,\n  };","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["Registration","useState","name","setName","email","setEmail","password","setPassword","nameId","nanoid","emailId","passwordId","dispatch","useDispatch","handleChange","event","currentTarget","value","className","scss","onSubmit","e","preventDefault","console","log","register","htmlFor","id","placeholder","type","required","onChange","pattern","Button","text","style","onClick","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase"],"sourceRoot":""}