{"version":3,"file":"static/js/42.1fbd19bb.chunk.js","mappings":"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","sources":["components/Item/ModalItemAddForm/ModalItemAddForm.jsx","components/Section/ModalAddSectionForm/ModalAddSectionForm.jsx","Pages/MenuItems/MenuItems.styled.jsx","components/Section/ItemSections/ItemsSections.styled.jsx","components/Section/ModalChangeSectionName/ModalChangeSectionName.styled.jsx","components/Section/ModalSectionDelete/ModalSectionDelete.jsx","components/Section/ModalChangeSectionName/ModalChangeSectionName.jsx","components/Section/ItemSections/ItemsSections.jsx","components/Navbar/NavbarLive/NavbarLive.styled.jsx","components/Navbar/NavbarLive/NavbarLive.jsx","Pages/MenuItems/MenuItems.jsx"],"sourcesContent":["import { useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport { Form, FormInputList, FormInputLabel, FormInput } from \"components/common/Input.styled\";\nimport {\n  // useSelector, \n  useDispatch } from 'react-redux';\n// import { getFilteredItems } from 'redux/items/items-selector';\n\nimport { addItems } from \"redux/items/items-operation\"; \nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { Button } from \"components/Button/Button\";\n\n\nexport default function ModalItemAddForm ({\n  // onClick,\n   setModalActive, category, itemsCategory}) {\n  // const items = useSelector(getFilteredItems);\n  // console.log(\"category\", category)\n  console.log(itemsCategory)\n  const dispatch = useDispatch();\n\n  const [itemName, setItemName] = useState('');\n  const [price, setPrice] = useState('');\n  const [description, setDescription] = useState('');\n  const [section, setSection] = useState(category)\n// console.log(section)\n  // const [datat, setDatat] = useState({\n  //   name: '',\n  //   description: '',\n  //   phone: '',\n\n  // });\n\n  const itemNameID = nanoid();\n  const priceID = nanoid();\n  const descriptionID = nanoid();\n\n  const handleChange = (e) => {\n        const { name } = e.currentTarget;\n        switch (name) {\n          case 'itemName':\n            setItemName ( e.currentTarget.value);\n            break;\n            case 'description':\n              setDescription (e.currentTarget.value);\n            break;\n          case 'price':\n            setPrice (e.currentTarget.value);\n            break;\n          default:\n            break;\n        }\n      };\n\n  const handleSubmit = (e) => {\n\n    // const { name, description, phone } = values;\n\n    // const data = new FormData();\n\n    // data.append('name', name);\n    // data.append('description', description);\n    // data.append('phone', phone);\n\n        e.preventDefault()\n        \n        const duplicateItems = itemsCategory.find(itemCategory => itemCategory.itemName.toLocaleLowerCase() === itemName.toLocaleLowerCase());\n      \n       \n          if (duplicateItems) {\n            Notify.failure(`${itemName} is already in item`)\n            return\n          }\n          if (description === \"\") {\n            setSection (category)\n            dispatch(addItems(\n              {itemName, price, section}\n              ));\n              setItemName('');\n            // setDescription('');\n            setPrice('');\n            setSection('');\n            setModalActive(false);\n          }\n          else {\n            setSection (category)\n            dispatch(addItems(\n             {itemName, description, price, section}\n              ));\n              setItemName('');\n              setDescription('');\n              setPrice('');\n              setSection('');\n              setModalActive(false);\n          }\n      }; \n  \n     \n      return ( \n        <Form \n        onClick={e => e.stopPropagation()}\n        onSubmit={handleSubmit}\n        >\n          <>\n        <FormInputList>\n          <FormInputLabel htmlFor={itemNameID}>Name</FormInputLabel>\n          <FormInput \n          id={itemNameID} \n          type=\"text\" \n          name=\"itemName\" \n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          value={itemName} \n          onChange={handleChange} />\n        </FormInputList>\n        <FormInputList>\n          <FormInputLabel htmlFor={descriptionID}>Description</FormInputLabel>\n          <FormInput \n          id={descriptionID} \n          type=\"text\" \n          name=\"description\" \n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          value={description} \n          onChange={handleChange} />\n        </FormInputList>\n        <FormInputList>\n          <FormInputLabel htmlFor={priceID}>Price</FormInputLabel>\n          <FormInput \n          id={priceID} \n          type=\"number\" \n          name=\"price\" \n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          value={price} \n          onChange={handleChange} \n          required/>\n        </FormInputList>\n\n        <Button \n        style={{\n          position: 'relative',\n          right: '0px',\n          height: '25px',\n          padding: '0px 0px',\n          minWidth: '100px',\n          fontSize: 15,\n          color: '#010101'\n        }}\n    \n      text=\"Add Item\"\n      type=\"submit\"\n      // onClick={() => setModalSectionActive(true)}\n      />\n        {/* <button \n        // onClick={values => handleSubmit(values)}\n        className={scss.formBtn}\n        type=\"submit\">Add</button> */}\n        </>\n        </Form>\n        )\n};","import { useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport { Form, FormInputList, FormInputLabel, FormInput } from \"components/common/Input.styled\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getSections } from 'redux/sections/sections-selector';\nimport { addSection } from \"redux/sections/sections-operation\"; \nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { Button } from \"components/Button/Button\";\n\nexport default function ModalAddSectionForm ({onClick, setModalSectionActive}) {\n  // console.log(setModalSectionActive)\n  const sections = useSelector(getSections);\n  // console.log(sections)\n  \n  const dispatch = useDispatch();\n\n  const [category, setCategory] = useState('');\n  \n\n  // const [datat, setDatat] = useState({\n  //   name: '',\n  //   description: '',\n  //   phone: '',\n\n  // });\n\n  const sectionNameID = nanoid();\n;\n\n  const handleChange = (e) => {\n        const { name } = e.currentTarget;\n        switch (name) {\n          case 'category':\n            setCategory ( e.currentTarget.value);\n            break;\n          default:\n            break;\n        }\n      };\n\n  const handleSubmit = (e) => {\n\n    // const { name, description, phone } = values;\n\n    // const data = new FormData();\n\n    // data.append('name', name);\n    // data.append('description', description);\n    // data.append('phone', phone);\n\n        e.preventDefault()\n        const duplicateSections = sections.find(section => section.category.toLocaleLowerCase() === category.toLocaleLowerCase());\n      \n       \n          if (duplicateSections) {\n            Notify.failure(`${category} is already in item`)\n            return\n          }\n              dispatch(addSection({category}));\n              setCategory('');\n              setModalSectionActive(false);\n          \n      }; \n\n\n      return ( \n        <Form \n        onClick={e => e.stopPropagation()}\n        onSubmit={handleSubmit}\n        >\n          <>\n        <FormInputList>\n          <FormInputLabel htmlFor={sectionNameID}>Name</FormInputLabel>\n          <FormInput \n          id={sectionNameID} \n          type=\"text\" \n          name=\"category\" \n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          value={category} \n          onChange={handleChange} />\n        </FormInputList>\n       \n        <Button \n        style={{\n          position: 'relative',\n          right: '0px',\n          height: '25px',\n          padding: '0px 0px',\n          minWidth: '80px',\n          fontSize: 15,\n          color: '#010101',\n        }}\n    \n      text=\"Add\"\n      type=\"submit\"\n      // onClick={() => setModalActive(true)}\n      />\n        {/* <button \n        // onClick={values => handleSubmit(values)}\n        className={scss.formBtn}\n        type=\"submit\">Add</button> */}\n        </>\n        </Form>\n        )\n};","import styled from 'styled-components';\n\n\nexport const Sections = styled.div`\n/* color: white; */\n    /* color: rgb(38, 146, 179); */\n    display: flex;\n    margin-top: 25px;\n    /* margin-left: 15px; */\n    padding-left: 5px;\n    padding-right: 5px;\n`\n export const BtnAddSection = styled.button`\n\n padding: 10px 10px;\n border: none;\n    border-radius: 5px;\n    background-color: ${props => props.theme.colors.btn};\n        &:hover,\n       &:focus {\n        background-color: ${props => props.theme.colors.btnActive};\n        cursor: pointer;\n  }\n `   \nexport const SectionForm = styled.div`\n    border: 4px;\n    width: 150px;\n`\n\n","import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n// import {MdOutlineDriveFileRenameOutline} from 'react-icons/md';\nimport {CiEdit} from 'react-icons/ci';\nimport {MdDeleteForever} from 'react-icons/md';\n\n\n\nexport const Wrapper = styled.div`\n  position: relative;\n\n`;\n\nexport const FilterList = styled.li`\n\n  list-style: none;\n  display: flex;\n  /* &:not(:last-child) { */\n    margin-bottom: 5px;\n/* } */\n  /* justify-content: flex-start; */\n  /* align-items: center; */\n  /* flex-wrap: wrap; */\n  /* gap: 12px; */\n\n`;\n\nexport const Item = styled.li`\n  display: flex;\n`;\n\nexport const Button = styled(NavLink)`\n/* list-style: none; */\nborder: none;\nwidth: 100%;\ncolor: #181515;\nfont-weight: 900;\n  line-height: 1.35;\n  letter-spacing: 0.04em;\n  \n  border-radius: 5px;\n  transition: color 250ms linear, background-color 250ms linear;\n      &:hover,\n       &:focus {\n        background-color: ${props => props.theme.colors.btnActive};\n        cursor: pointer;\n  }\n\n  &.active {\n   color: #573131;\n   background-color: #749574;\n  }\n\n`;\nexport const CommonLinks = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  flex-wrap: wrap-reverse;\n  gap: 12px;\n \n`;\nexport const AuthLinks = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  gap: 12px;\n`;\n// const Change = ({ className }) => <MdOutlineDriveFileRenameOutline className={className} />;\nexport const BtnChange = styled.button`\n  border: none;\n  background-color: transparent;\n`\nexport const StyledChange = styled(CiEdit)`\n  color: red;\n  \n`\nexport const DelSection = styled(MdDeleteForever)`\n  color: red;\n  \n`","import styled from 'styled-components';\n\n\n\nexport const BtnList = styled.div`\n  margin-top: 10px;\n`","import React from 'react'\nimport { useDispatch } from 'react-redux';\n    import { deleteSection } from \"redux/sections/sections-operation\";\nimport { delItemsByCategory } from 'redux/items/items-operation';\nimport { Button } from 'components/Button/Button';\nexport default function ModalSectionDelete({_id, closeModal}) {\n\n\n    const dispatch = useDispatch();\nconsole.log(_id)\n    function DelSection () {\n        dispatch(delItemsByCategory(_id));\n        dispatch(deleteSection(_id));\n        closeModal ();\n      }\n    \n\n  return (\n    <div\n      onClick={e => e.stopPropagation()}\n      // active={modalActive}\n      >\n       <p>Do you really wont to delete?\n        all items will also be deleted</p> \n\n        <Button \n        style={{\n          position: 'relative',\n          right: '0px',\n          height: '25px',\n          padding: '0px 0px',\n          minWidth: '80px',\n          fontSize: 15,\n          color: '#010101',\n        }}\n    \n      text=\"Yes\"\n      type=\"button\"\n      onClick={() => {DelSection ()}}\n      />\n      <Button \n        style={{\n          position: 'relative',\n          right: '0px',\n          height: '25px',\n          padding: '0px 0px',\n          minWidth: '80px',\n          fontSize: 15,\n          color: '#010101',\n        }}\n    \n      text=\"No\"\n      type=\"button\"\n      onClick={() => closeModal ()}\n      />\n       \n        \n      </div>\n  )\n}\n","import { useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport { Form, FormInputList, FormInput, FormInputLabel, LabelName } from \"components/common/Input.styled\";\nimport {\n  useSelector, \n  useDispatch } from 'react-redux';\nimport { getSections } from 'redux/sections/sections-selector';\nimport { updateSection } from \"redux/sections/sections-operation\"; \nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { BtnList } from \"./ModalChangeSectionName.styled\";\nimport { Modal } from \"components/common/Modal/Modal\";\nimport ModalSectionDelete from \"../ModalSectionDelete/ModalSectionDelete\";\n// import { Formik } from 'formik';\n// import { useLocation,\n//   //  useSearchParams\n//    } from 'react-router-dom';\n  //  import { useEffect } from \"react\";\n  //  import {  geItemsByCategory } from \"redux/items/items-operation\";\n  //  import { fetchSections } from \"redux/sections/sections-operation\"\n  import { Button } from \"components/Button/Button\";\n\nexport default function ModalChangeSectionName ({\n  //  itemsCategory, \n   category,\n  //  price, \n  //  description, \n   _id,\n    closeModal}) {\n  const sections = useSelector(getSections);\n  // console.log(\"category\", category)\n  \n \n\n// const example = [\n//   {\n//   _id: \"12458255\", \n//   itemName: \"name\",\n//   description: \"descr\",\n//   price: \"255\"\n// }\n// ]\n\n\n// console.log(example)\n// console.log(itemsCategory)\n// const newArr = example.map(({_id, ...rest}) => ({rest}))\n\n// // const resss = (exell.map(data => \n// //   delete data._id))\n// // const arr = exell.splice(0, 1)\n// console.log(newArr)\n\n\n  //  const location = useLocation();\n\n//   const category = location.pathname.split('/')[2];\n  const dispatch = useDispatch();\n\n  const [newSectionName, setNewSectionName] = useState(category);\n  const [modalDeleteActive, setModalDeleteActive] = useState(false);\n\n  // const [section, setSection] = useState(category)\n// console.log(section)\n\n\n  const sectionNameID = nanoid();\n \n \n// console.log(itemName, price)\n\n  const handleChange = (e) => {\n        const { name } = e.currentTarget;\n        switch (name) {\n          case 'newSectionName':\n            setNewSectionName ( e.currentTarget.value);\n            break;\n          default:\n            break;\n        }\n      };\n\n  const handleSubmit = (e) => {\n\n        e.preventDefault()\n        const duplicateItems = sections.find(section => section.category.toLocaleLowerCase() === newSectionName.toLocaleLowerCase());\n      \n       \n          if (duplicateItems) {\n            Notify.failure(`${newSectionName} is already in item`)\n            // alert (`${name} is already in contact`)\n            return\n          }\n          // if (description === \"\") {\n          //   setSection (category)\n          //   dispatch(addItems(\n          //     {itemsName, price, section}\n          //     ));\n          //     setItemsName('');\n          //   // setDescription('');\n          //   setPrice('');\n          //   setSection('');\n          //   setModalActive(false);\n          // }\n          // else {\n            // setSection (category)\n\n            // console.log(_id)\n            // console.log(itemsName)\n            // console.log(dispatch(itemUpdate({_id, \n            //   itemName: itemsName}\n            //  )))\n            // setSection (category)\n\n            dispatch(updateSection(\n              {_id, \n                category: newSectionName,              \n              } ));\n                // dispatch(geItemsByCategory({category: category}))\n                setNewSectionName('');\n            \n              closeModal ();\n              // setModalDetailActive(false);\n          // }\n      }; \n      // const initialValues = {\n      //   name: '',\n      //   description: '',\n      //   phone: '',\n      // };\n\n\n      // useEffect(() => {\n      //   // dispatch(fetchItems());\n      //   console.log(\"use in modal\")\n      //   dispatch(fetchSections());\n      \n        \n      //     // if (category === undefined) {\n      //     //   console.log(\"undef\")\n      //     // }\n      //     // else {\n           \n      //     //   dispatch(geItemsByCategory({category: category}))\n      //     // }\n        \n      //   }, \n      //    [ dispatch,\n      //       newSectionName,\n      //      category,\n      //      ])\n\n\n\n\n      return ( \n        <Form \n        onClick={e => e.stopPropagation()}\n        onSubmit={handleSubmit}\n        >\n          <>\n        <FormInputList>\n          <FormInputLabel htmlFor={sectionNameID}><LabelName>Change Name</LabelName></FormInputLabel>\n          <FormInput \n          id={sectionNameID} \n          type=\"text\" \n          name=\"newSectionName\" \n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may \"\n          required\n          // value={itemsName} \n          defaultValue={category}\n          onChange={handleChange} />\n        </FormInputList>\n        \n<BtnList>\n        <Button \n        style={{\n          position: 'relative',\n          right: '0px',\n          height: '25px',\n          padding: '0px 0px',\n          minWidth: '80px',\n          fontSize: 15,\n          color: '#010101',\n          marginRight: 'auto',\n          marginLeft: 'auto',\n          \n        }}\n    \n      text=\"Rename\"\n      type=\"submit\"\n      />\n      <Button \n        style={{\n          position: 'relative',\n          right: '0px',\n          height: '25px',\n          padding: '0px 0px',\n          minWidth: '110px',\n          fontSize: 15,\n          color: '#632121',\n          marginRight: 'auto',\n          marginLeft: '25px',\n        }}\n    \n      text=\"Delete Section\"\n      type=\"button\"\n      onClick={() => setModalDeleteActive(true)}\n      />\n   </BtnList>\n              { modalDeleteActive && (\n          <Modal\n          onClick={() => closeModal ()}\n          active={modalDeleteActive}\n          setActive={setModalDeleteActive}>\n          <ModalSectionDelete\n          closeModal={closeModal}\n          _id={_id}\n          category={category}\n          />\n     \n          </Modal>\n         )}\n        {/* <button \n        // onClick={values => handleSubmit(values)}\n        className={scss.formBtn}\n        type=\"submit\">Change Section</button> */}\n        </>\n        </Form>\n        )\n};","import {useState} from 'react';\nimport { \n  // useSelector,\n  useDispatch} from 'react-redux';\n// import { getSections } from 'redux/sections/sections-selector';\n// import { selectIsLoggedIn } from 'redux/auth/authSelectors';\nimport { nanoid } from 'nanoid';\nimport {\n  Button,\n  FilterList,\n  StyledChange,\n  BtnChange,\n  // Item,\n  // Wrapper,\n  // AuthLinks,\n  // CommonLinks,\n} from './ItemsSections.styled';\nimport { Modal } from 'components/common/Modal/Modal';\nimport ModalChangeSectionName from '../ModalChangeSectionName/ModalChangeSectionName';\n// import { useEffect } from \"react\";\n// import {  geItemsByCategory } from \"redux/items/items-operation\";\nimport { fetchSections } from \"redux/sections/sections-operation\"\n\n// const btnId = nanoid();\n// const sectionId = nanoid();\n\n// const authButtons = [\n//   {\n//     btn: 'favorite ads',\n//     link: 'favorites-ads',\n//   },\n//   {\n//     btn: 'my ads',\n//     link: 'my-ads',\n//   },\n// ];\n\nfunction ItemsSections({section}) {\n  // const sections = useSelector(getSections);\n  // console.log(section)\n  const [modalActive, setModalActive] = useState(false);\n  const dispatch = useDispatch();\n  function closeModal () {\n    setModalActive(false)\n    \n    document.body.style.overflow = '';\n    dispatch(fetchSections());\n  }\n  const { \n    _id,\n    category,\n  } = section;\n  // console.log(category)\n\n  const buttons = [\n    {\n      btn: category,\n      link: _id,\n    }\n  \n  ];\n  // const isLoggedIn = useSelector(selectIsLoggedIn);\n\n  return (\n    // <Wrapper>\n      <FilterList key={nanoid()}>\n        {/* <CommonLinks> */}\n        \n          {buttons.map(b => (\n            // <Item key={btnId}>\n              <Button \n              key={nanoid()}\n              to={'/items/' + b.link} name={b.link}>\n                {b.btn}\n              </Button>\n              \n            //  </Item>\n          ))}\n          <BtnChange\n          key={nanoid()}\n          onClick={() => setModalActive(true)}>\n                <StyledChange/>\n              </BtnChange>\n              { modalActive && (\n          <Modal\n          onClick={() => closeModal ()}\n          active={modalActive}\n          setActive={setModalActive}>\n          <ModalChangeSectionName\n          closeModal={closeModal}\n          _id={_id}\n          category={category}\n          />\n     \n          </Modal>\n         )}\n        {/* </CommonLinks> */}\n        {/* <AuthLinks>\n          {isLoggedIn &&\n            authButtons.map(b => (\n              <Item key={nanoid()}>\n                <Button to={'/items/' + b.link} name={b.link}>\n                  {b.btn}\n                </Button>\n              </Item>\n            ))}\n        </AuthLinks> */}\n      </FilterList>\n    // </Wrapper>\n  );\n}\n\nexport default ItemsSections;\n","import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const ToLiveLinkList = styled.div`\n    display: flex;\n    flex-direction: row-reverse;\n\n`\nexport const ToLiveLink = styled(NavLink)`\n    position: relative;\n    top: 5px;\n    right: 15px;\n    font-weight: 900;\n    color: #181515;\n    &:hover,\n       &:focus {\n        color: ${props => props.theme.colors.btnActive};\n        cursor: pointer;\n  }\n`","// import items from \"./items\"\nimport { nanoid } from \"nanoid\";\n// import { NavLink } from \"react-router-dom\"\nimport { getUser } from \"redux/auth/auth-selector\";\nimport { useSelector } from \"react-redux\";\nimport { ToLiveLink, ToLiveLinkList } from \"./NavbarLive.styled\";\n\n\n\nexport default function NavbarLive() {\n  const user = useSelector(getUser);\n  console.log(user)\n  const chekName = Boolean(user)\n  const items = chekName ? [\n   \n    {id: nanoid(),\n      to: `/live/${user._id}`,\n      text: \"Go to QR Menu\",\n  },\n   \n    ] : \"\";\n\n\n  \n  return (\n    <ToLiveLinkList>\n      {chekName ? items.map(({id, to, text}) => {\n            return (\n                // <li  key={id}>\n                    <ToLiveLink  \n                    target=\"_blank\"\n                    rel=\"noreferrer noopener\"\n                    to={to}\n                    end>\n                      {text}\n                     </ToLiveLink>\n                // </li>\n            )})\n         : <></> }\n\n        \n    </ToLiveLinkList>\n  )\n}","// import { useEffect } from \"react\";\nimport  ModalItemAddForm  from \"../../components/Item/ModalItemAddForm/ModalItemAddForm\"\nimport ModalAddSectionForm from \"components/Section/ModalAddSectionForm/ModalAddSectionForm\"\n// import {ItemList} from \"../../components/Item/ItemList/ItemList\"\nimport { \n  fetchItems,\n  //  geItemsByCategory\n   } from \"redux/items/items-operation\"\n// import Filter from \"../../components/filter/Filter\"\nimport { Sections, SectionForm,\n  //  BtnAddSection \n  } from \"./MenuItems.styled\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEffect, useState } from \"react\";\n// import { getState } from 'redux/items/items-selector';\nimport { \n  // getItems,\n   getItemsByCategory } from 'redux/items/items-selector';\nimport { getSections } from \"redux/sections/sections-selector\"\nimport { Modal } from \"components/common/Modal/Modal\";\nimport ItemsSections from \"components/Section/ItemSections/ItemsSections\"\nimport { useLocation,\n  // useParams\n  //  useSearchParams\n   } from 'react-router-dom'\n// import UseAuth from \"components/hooks/useAuth\"\n// import { Navigate } from \"react-router-dom\"\nimport { fetchSections } from \"redux/sections/sections-operation\"\n// import {  allUsers } from \"redux/user/user-operation\";\nimport MenuItemsDetails from \"components/MenuItemsDetails/MenuItemsDetails\"\nimport NavbarLive from \"components/Navbar/NavbarLive/NavbarLive\"\nimport { Button } from \"components/Button/Button\";\n\nexport default function MenuItems() {\n\n\n  const location = useLocation();\n  const category = location.pathname.split('/')[2];\n  // console.log(\"category\", category)\n  const [modalActive, setModalActive] = useState(false);\n  const [modalSectionActive, setModalSectionActive] = useState(false);\n\n\n\n  function closeModal () {\n    setModalActive(false)\n    setModalSectionActive(false)\n    document.body.style.overflow = '';\n  }\n\n  const dispatch = useDispatch();\n  // const items = useSelector(getItems);\n  const itemsCategory = useSelector(getItemsByCategory);\n  const sections = useSelector(getSections);\n  // console.log(\"sections\", sections)\n  // console.log(sections)\n//  const {loading, error} = useSelector(getState);\n\n\n      useEffect(() => {\n        // dispatch(allUsers())\n          dispatch(fetchItems());\n          dispatch(fetchSections());\n          \n        \n            // if (category === undefined) {\n              \n            // }\n            // else {\n             \n            //   dispatch(geItemsByCategory({category: category}))\n            // }\n          \n          }, \n           [ dispatch\n            // category, \n            // , items\n          ]\n          );\n\n    // const { category } = useParams();\n    // console.log(category)\n  return (\n    <>\n    <NavbarLive/>\n    <Sections  >\n      <SectionForm >\n        <ul>\n          {sections.map(section =>\n           <ItemsSections\n           section={section}\n           ></ItemsSections>)\n        }\n        </ul>\n        <Button \n        style={{\n          position: 'relative',\n          right: '0px',\n          height: '25px',\n          padding: '0px 0px',\n          minWidth: '100px',\n          fontSize: 15,\n          color: '#010101'\n        }}\n    \n      text=\"Add Section\"\n      type=\"button\"\n      onClick={() => setModalSectionActive(true)}\n      />\n        {/* <Button\n      typAdd Sectione=\"button\"\n      onClick={() => setModalSectionActive(true)}>\n        \n      </Button> */}\n      { modalSectionActive && (\n        <Modal\n        onClick={() => closeModal ()}\n        active={modalSectionActive}\n        setActive={setModalSectionActive}>\n        <ModalAddSectionForm \n        onClick={e => e.stopPropagation()}\n        setModalSectionActive={setModalSectionActive}\n        />\n        </Modal>\n      )}\n      { modalActive && (\n        <Modal\n        onClick={() => closeModal ()}\n        active={modalActive}\n        setActive={setModalActive}>\n        <ModalItemAddForm \n        onClick={e => e.stopPropagation()}\n        setModalActive={setModalActive}\n        category={category}\n        itemsCategory={itemsCategory}\n        />\n        </Modal>\n      )}\n      </SectionForm>\n      <MenuItemsDetails \n      setModalActive={setModalActive}\n      />\n      {/* <div className={scss.contacts}>\n      <h2>Menu</h2>\n        <Filter />\n          {!loading && items.length > 0 && \n          <ItemList\n          items={items} \n          itemsCategory={itemsCategory}\n          />}\n          {loading && <p className={scss.contactsLoading}>...loading</p>}\n          {error && <p>No items yet</p>}\n      </div>\n      <button\n      type=\"button\"\n      onClick={() => setModalActive(true)}>\n        Add Item\n      </button> */}\n    </Sections>\n    </>\n    )\n};"],"names":["ModalItemAddForm","setModalActive","category","itemsCategory","console","log","dispatch","useDispatch","useState","itemName","setItemName","price","setPrice","description","setDescription","section","setSection","itemNameID","nanoid","priceID","descriptionID","handleChange","e","currentTarget","name","value","onClick","stopPropagation","onSubmit","preventDefault","find","itemCategory","toLocaleLowerCase","Notify","addItems","htmlFor","id","type","pattern","title","required","onChange","Button","style","position","right","height","padding","minWidth","fontSize","color","text","ModalAddSectionForm","setModalSectionActive","sections","useSelector","getSections","setCategory","sectionNameID","addSection","Sections","styled","SectionForm","props","theme","colors","btn","btnActive","FilterList","NavLink","BtnChange","StyledChange","CiEdit","BtnList","MdDeleteForever","ModalSectionDelete","_id","closeModal","delItemsByCategory","deleteSection","ModalChangeSectionName","newSectionName","setNewSectionName","modalDeleteActive","setModalDeleteActive","updateSection","defaultValue","marginRight","marginLeft","Modal","active","setActive","modalActive","document","body","overflow","fetchSections","buttons","link","map","b","to","ToLiveLinkList","ToLiveLink","NavbarLive","user","getUser","chekName","Boolean","items","target","rel","end","MenuItems","useLocation","pathname","split","modalSectionActive","getItemsByCategory","useEffect","fetchItems","MenuItemsDetails"],"sourceRoot":""}