{"version":3,"file":"static/js/635.0313c5ed.chunk.js","mappings":"+NA6CA,MArCA,YAA8C,IAAjBA,EAAgB,EAAhBA,QAASC,EAAO,EAAPA,KAM9BC,EAAU,CACd,CACEC,IAJAH,EADFI,SAMEC,KAAMJ,IAKV,OAEI,wBACaC,EAAQI,KAAI,SAAAC,GAAC,OAClB,2BACE,wBAAKA,EAAEJ,MACNI,EAAEF,KAAKC,KAAI,SAAAD,GAAI,OAChB,2BACG,qCAAaA,EAAKG,aAClB,4CAAoBH,EAAKI,gBACzB,sCAAcJ,EAAKK,WAJN,MAHA,MADjBC,EAAAA,EAAAA,MAmBd,E,8BC5Bc,SAASC,IAGtB,IACMR,GADWS,EAAAA,EAAAA,MACUC,SAASC,MAAM,KAAK,GAEvCC,GAAWC,EAAAA,EAAAA,MAEXC,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IACvBC,GAAQF,EAAAA,EAAAA,IAAYG,EAAAA,IAiB5B,OAfEC,EAAAA,EAAAA,YAAU,WAENP,GAASQ,EAAAA,EAAAA,MACLpB,IACFY,GAASS,EAAAA,EAAAA,IAAerB,IACxBY,GAASU,EAAAA,EAAAA,IAActB,IAI1B,GAED,CAACY,EAAUZ,KAKb,iCAEA,kBAASO,EAAAA,EAAAA,QAQT,wBACIO,EAASZ,KAAI,SAAAN,GAAO,OACpB,SAAC,EAAD,CACAA,QAASA,EACTC,KAAMoB,EAAMM,QAAO,SAAAC,GAAC,OAClBA,EAAE5B,UAAYA,EAAQI,QADJ,IAFpB,eADoB,MADfO,EAAAA,EAAAA,SAWZ,C,gIC/DM,IAAMkB,EAAW,SAAC,GAAD,SAAER,MAAiBA,KAAnB,EACXC,EAAe,SAAC,GAAD,SAAED,MAAiBS,SAAnB,EACfC,EAAqB,SAAC,GAAD,SAAEV,MAAmBW,eAArB,EAErBC,EAAW,SAAC,GAAD,IAAEZ,EAAF,EAAEA,MAAF,MAAc,CAACa,QAASb,EAAMa,QAASC,MAAOd,EAAMc,MAApD,C,wDCJjB,IAAMf,EAAc,SAAC,GAAD,SAAEF,SAAyBA,QAA3B,C,wDCC3B,IAkBIP,EAAS,WAGX,IAH0B,IAAdyB,EAAc,uDAAP,GACfC,EAAK,GACLC,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWL,IAC3CA,KAAQ,CACb,IAAIM,EAAqB,GAAdJ,EAAMF,GAEfC,GADEK,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAET,CACD,OAAOL,CACR,C","sources":["components/Live/LiveItemsSections/LiveItemsSections.jsx","Pages/LivePage/LivePage.jsx","redux/items/items-selector.js","redux/sections/sections-selector.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { nanoid } from 'nanoid';\n\n\n// const btnId = nanoid();\n// const sectionId = nanoid();\n\n\n\nfunction LiveItemsSections ({section, item}) {\n \n  const { \n    category,\n  } = section;\n  \n  const buttons = [\n    {\n      btn: category,\n      list: item,\n    }\n  \n  ];\n  \n  return (\n   \n      <ul key={nanoid()}>\n                  {buttons.map(b => (\n              <li  >\n                <h2>{b.btn}</h2> \n                {b.list.map(list => (\n                <li>\n                  {<p>\"Name\" - {list.itemName}</p>} \n                  {<p>\"Description\" - {list.description}</p>}\n                  {<p>\"Price\" - {list.price}</p>} \n                  </li>\n                ))}\n              </li>\n              \n              )\n              \n              )}\n            \n      </ul>\n  );\n}\n\nexport default LiveItemsSections;\n","// import {  getAllUser } from \"redux/user/user-selector\";\nimport {  useDispatch,useSelector } from \"react-redux\";\nimport React, { useEffect } from \"react\";\nimport {  allUsers } from \"redux/user/user-operation\";\n// import LiveListUser from \"components/Live/LiveListUser/LIveListUser\";\nimport { nanoid } from 'nanoid';\nimport { getSections } from \"redux/sections/sections-selector\"\nimport { fetchSections } from \"redux/sections/sections-operation\"\nimport LiveItemsSections from \"components/Live/LiveItemsSections/LiveItemsSections\";\nimport { useLocation } from 'react-router-dom'\n   import {  fetchItemsLive } from \"redux/items/items-operation\"\n     import { getItemsLive } from 'redux/items/items-selector';\n    //  import { useCallback } from \"react\";\n\n\nexport default function LivePage() {\n\n\n  const location = useLocation();\n  const category = (location.pathname.split('/')[2])\n  \n    const dispatch = useDispatch();\n    // const users = useSelector(getAllUser)\n    const sections = useSelector(getSections);\n    const items = useSelector(getItemsLive);\n\n    useEffect(() => {\n      \n        dispatch(allUsers())\n        if (category) {\n          dispatch(fetchItemsLive(category));\n          dispatch(fetchSections(category));\n        }\n        \n        \n      }, \n\n      [dispatch, category])\n\n\n  \n  return (\n    <>\n    \n    <ul key={nanoid()}>\n          {/* {users.map(user =>\n           <LiveListUser\n           user={user}\n          //  sections={sections}\n           ></LiveListUser>\n            ) }  */}\n    </ul>\n    <ul key={nanoid()}>\n       {sections.map(section =>\n        <LiveItemsSections\n        section={section}\n        item={items.filter(i => \n          i.section === section.category)}\n        >  </LiveItemsSections>)\n}\n    </ul>\n      </>\n  )\n}\n","export const getItems = ({items}) => items.items;\nexport const getItemsLive = ({items}) => items.itemsLive;\nexport const getItemsByCategory = ({items}) => ( items.itemsByCategory);\nexport const getItemUpdate = ({items}) => (items.itemsByCategory);\nexport const getState = ({items}) => ({loading: items.loading, error: items.error});\nexport const getFilteredItems = ({filter, items}) => {   \n    if (!filter) \n    {return items.items};\n};","export const getSections = ({sections}) => ( sections.sections)\nexport const getSectionsLive = ({sectionsLive}) => ( sectionsLive.sections)\nexport const getState = ({sections}) => ({loading: sections.loading, error: sections.error});","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["section","item","buttons","btn","category","list","map","b","itemName","description","price","nanoid","LivePage","useLocation","pathname","split","dispatch","useDispatch","sections","useSelector","getSections","items","getItemsLive","useEffect","allUsers","fetchItemsLive","fetchSections","filter","i","getItems","itemsLive","getItemsByCategory","itemsByCategory","getState","loading","error","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase"],"sourceRoot":""}