{"version":3,"file":"static/js/172.3a6ab637.chunk.js","mappings":"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","sources":["Pages/Login/Login.styled.jsx","components/hooks/useForm.js","components/LoginForm/LoginForm.styled.jsx","components/LoginForm/loginForm.jsx","Pages/Login/Login.jsx","components/Button/Button.styled.jsx","components/Button/Button.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const LoginPage = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n`\nexport const Title = styled.h1`\n    color: white;\n    font-size: 25px;\n    margin-top: 25px;\n    margin-bottom: 25px;\n`","import {useState} from \"react\";\n\nconst useForm = ({initialState, onSubmit}) => {\n    const [state, setState] = useState({...initialState});\n\n    const handleChange = ({target}) => {\n        const {value, name, type, checked} = target;\n        const newValue = type === \"checkbox\" ? checked : value;\n        setState(prevState => ({\n            ...prevState,\n            [name]: newValue.toLocaleLowerCase(),\n        }))\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        onSubmit({...state});\n        setState({...initialState});\n    };\n\n    return {state, setState, handleChange, handleSubmit}\n}\n\nexport default useForm;","import styled from 'styled-components';\n\nexport const LoginFormLabelList = styled.div`\n    width: 90px;\n    font-weight: 600;\n`\nexport const LoginFormWrapper = styled.div`\n    margin-bottom: 25px;\n`\nexport const LoginFormList = styled.div`\n    display: flex;\n    align-items: center;\n   \n    &:not(:last-child) {\n        margin-bottom: 10px;\n    }\n`\n    \nexport const LoginFormInput = styled.input`\n    padding-left: 10px;\n    width: 200px;\n    height: 35px;\n border-radius: 5px;\n border: 1px solid #749574;\n`\nexport const LoginFormLabel = styled.label`\n    color: white;\n\n`","import { nanoid } from \"nanoid\";\nimport useForm from 'components/hooks/useForm';\nimport PropTypes from \"prop-types\";\nimport { Button } from \"components/Button/Button\";\nimport { LoginFormWrapper, LoginFormLabelList, LoginFormLabel, LoginFormList, LoginFormInput } from \"./LoginForm.styled\";\n\n    const initialState = {\n        email: \"\",\n        password: \"\",\n      };\n    \n    export default function LoginForm({onSubmit}) {\n\n        const {state, handleChange, handleSubmit} = useForm({initialState, onSubmit});\n        const {email, password} = state;\n\n        const emailId = nanoid();\n        const passwordId = nanoid();\n\n\n      return (\n        <div>\n        <form onSubmit={handleSubmit}>\n<LoginFormWrapper>\n       <LoginFormList>\n            <LoginFormLabelList>\n              <LoginFormLabel\n            htmlFor={emailId}> Login </LoginFormLabel>\n            </LoginFormLabelList> \n            <LoginFormInput \n            id={emailId} placeholder=\"Enter name\" name=\"email\" type=\"text\" required onChange={handleChange} value={email}\n            pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$\" \n             />\n        </LoginFormList>\n        <LoginFormList>\n            <LoginFormLabelList >\n              <LoginFormLabel\n            htmlFor={passwordId}>Password </LoginFormLabel>\n            </LoginFormLabelList>\n            <LoginFormInput \n            id={passwordId} placeholder=\"Enter password\" name=\"password\" type=\"password\" required onChange={handleChange} value={password}\n             />\n        </LoginFormList>\n        </LoginFormWrapper>\n        <Button \n        style={{\n          height: '35px',\n        }}\n        text=\"Login\"\n        type=\"submit\"\n        />\n       </form>\n       </div>\n      )\n    };\n\n    LoginForm.defaultProps = {\n        onSubmit: () => {}\n      }\n      \n      LoginForm.propTypes = {\n        onSubmit: PropTypes.func,\n      }\n    ","import { useDispatch } from \"react-redux\";\nimport { login } from 'redux/auth/auth-operation';\nimport { LoginPage, Title } from \"./Login.styled\";\n\nimport LoginForm from 'components/LoginForm/loginForm';\n\nexport default function Login () {\n   \n    const dispatch = useDispatch();\n    const onLogin = (data) => {\n      dispatch(login(data));\n    }\n  return (\n    <LoginPage>\n      <Title>Sign in please <br /> in your Menu</Title>\n      <LoginForm onSubmit={onLogin}/>\n    </LoginPage>\n  )\n};\n\n\n","import styled from 'styled-components';\n\nexport const Btn = styled.button`\n  padding: 0px 5px;\n  background-color: ${props => props.theme.colors.btn};\n    transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    border: none;\n    border-radius: 10px;\n    text-decoration: none;\n    cursor: pointer;\n    font-family: inherit;\n    /* font-weight: 800; */\n    min-width: 100px;\n    height: 25px;\n    box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2),\n      0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);\n      &:hover,\n       &:focus {\n        background-color: ${props => props.theme.colors.btnActive};\n        cursor: pointer;\n  }\n` \nexport const TextBtn = styled.p`\n  color: ${props => props.theme.colors.mainTextBtn};\n  font-size: 15px;\n  font-weight: 800;\n  /* line-height: 24px; */\n  /* font-style: normal; */\n\n`\n  \n  ","import { Btn, TextBtn } from './Button.styled';\nimport PropTypes from 'prop-types';\n\nexport const Button = ({style, text, type,\n  onClick\n}) => {\n  return (\n    <Btn \n    style={style}\n    onClick={onClick}\n    type={type}\n    >\n      <TextBtn>{text}</TextBtn>\n    </Btn>\n  );\n};\n\nButton.propTypes = {\n    onClick: PropTypes.func,\n  };","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["LoginPage","styled","_templateObject","_taggedTemplateLiteral","Title","_templateObject2","_ref","initialState","onSubmit","_useState","useState","_objectSpread","_useState2","_slicedToArray","state","setState","handleChange","_ref2","target","value","name","type","checked","newValue","prevState","_defineProperty","toLocaleLowerCase","handleSubmit","e","preventDefault","LoginFormLabelList","LoginFormWrapper","LoginFormList","_templateObject3","LoginFormInput","_templateObject4","LoginFormLabel","_templateObject5","email","password","LoginForm","_useForm","useForm","emailId","nanoid","passwordId","_jsx","children","_jsxs","htmlFor","id","placeholder","required","onChange","pattern","Button","style","height","text","Login","dispatch","useDispatch","data","login","defaultProps","Btn","props","theme","colors","btn","btnActive","TextBtn","mainTextBtn","onClick","size","arguments","length","undefined","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}