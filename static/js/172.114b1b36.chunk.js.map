{"version":3,"file":"static/js/172.114b1b36.chunk.js","mappings":"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","sources":["Pages/Login/Login.styled.jsx","components/hooks/useForm.js","components/LoginForm/LoginForm.styled.jsx","components/LoginForm/loginForm.jsx","Pages/Login/Login.jsx","components/Button/Button.styled.jsx","components/Button/Button.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const LoginPage = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n`\nexport const Title = styled.h1`\n    color: white;\n`","import {useState} from \"react\";\n\nconst useForm = ({initialState, onSubmit}) => {\n    const [state, setState] = useState({...initialState});\n\n    const handleChange = ({target}) => {\n        const {value, name, type, checked} = target;\n        const newValue = type === \"checkbox\" ? checked : value;\n        setState(prevState => ({\n            ...prevState,\n            [name]: newValue,\n        }))\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        onSubmit({...state});\n        setState({...initialState});\n    };\n\n    return {state, setState, handleChange, handleSubmit}\n}\n\nexport default useForm;","import styled from 'styled-components';\n\nexport const LoginFormLabelList = styled.div`\n    width: 90px;\n    font-weight: 600;\n`\n\nexport const LoginFormList = styled.div`\n    display: flex;\n    align-items: center;\n   \n    margin-bottom: 5px;\n\n`\n    \nexport const LoginFormInput = styled.input`\n    padding-left: 10px;\n    width: 200px;\n    height: 25px;\n border-radius: 5px;\n border: 1px solid #749574;\n`\nexport const LoginFormLabel = styled.label`\n    color: white;\n\n`","import { nanoid } from \"nanoid\";\nimport useForm from 'components/hooks/useForm';\nimport PropTypes from \"prop-types\";\nimport { Button } from \"components/Button/Button\";\nimport { LoginFormLabelList, LoginFormLabel, LoginFormList, LoginFormInput } from \"./LoginForm.styled\";\n\n    const initialState = {\n        email: \"\",\n        password: \"\",\n      };\n    \n    export default function LoginForm({onSubmit}) {\n\n        const {state, handleChange, handleSubmit} = useForm({initialState, onSubmit});\n        const {email, password} = state;\n\n        const emailId = nanoid();\n        const passwordId = nanoid();\n\n\n      return (\n        <div>\n        <form onSubmit={handleSubmit}>\n       <LoginFormList>\n            <LoginFormLabelList>\n              <LoginFormLabel\n            htmlFor={emailId}> Login </LoginFormLabel>\n            </LoginFormLabelList> \n            <LoginFormInput \n            id={emailId} placeholder=\"Enter name\" name=\"email\" type=\"text\" required onChange={handleChange} value={email}\n            pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$\" \n             />\n        </LoginFormList>\n        <LoginFormList>\n            <LoginFormLabelList >\n              <LoginFormLabel\n            htmlFor={passwordId}>Password </LoginFormLabel>\n            </LoginFormLabelList>\n            <LoginFormInput \n            id={passwordId} placeholder=\"Enter password\" name=\"password\" type=\"password\" required onChange={handleChange} value={password}\n             />\n        </LoginFormList>\n        <Button \n        text=\"Login\"\n        type=\"button\"\n        />\n       </form>\n       </div>\n      )\n    };\n\n    LoginForm.defaultProps = {\n        onSubmit: () => {}\n      }\n      \n      LoginForm.propTypes = {\n        onSubmit: PropTypes.func,\n      }\n    ","import { useDispatch } from \"react-redux\";\nimport { login } from 'redux/auth/auth-operation';\nimport { LoginPage, Title } from \"./Login.styled\";\n\nimport LoginForm from 'components/LoginForm/loginForm';\n\nexport default function Login () {\n   \n    const dispatch = useDispatch();\n    const onLogin = (data) => {\n      dispatch(login(data));\n    }\n  return (\n    <LoginPage>\n      <Title>Sign in please <br /> in your Menu</Title>\n      <LoginForm onSubmit={onLogin}/>\n    </LoginPage>\n  )\n};\n\n\n","import styled from 'styled-components';\n\nexport const Btn = styled.button`\n  padding: 8px 16px;\n  background-color: ${props => props.theme.colors.btn};\n    transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    color: #fff;\n    border: none;\n    border-radius: 10px;\n    text-decoration: none;\n    cursor: pointer;\n    font-family: inherit;\n    font-size: 18px;\n    line-height: 24px;\n    font-style: normal;\n    font-weight: 500;\n    min-width: 100px;\n    box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2),\n      0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);\n      &:hover,\n       &:focus {\n        background-color: ${props => props.theme.colors.btnActive};\n        cursor: pointer;\n  }\n` \n  \n  ","import { Btn } from './Button.styled';\nimport PropTypes from 'prop-types';\n\nexport const Button = ({style, text, \n  onClick\n}) => {\n  return (\n    <Btn \n    style={style}\n    onClick={onClick}\n    >\n      {text}\n    </Btn>\n  );\n};\n\nButton.propTypes = {\n    onClick: PropTypes.func,\n  };","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["LoginPage","styled","Title","initialState","onSubmit","useState","state","setState","handleChange","target","value","name","type","checked","newValue","prevState","handleSubmit","e","preventDefault","LoginFormLabelList","LoginFormList","LoginFormInput","LoginFormLabel","email","password","LoginForm","useForm","emailId","nanoid","passwordId","htmlFor","id","placeholder","required","onChange","pattern","Button","text","Login","dispatch","useDispatch","data","login","defaultProps","Btn","props","theme","colors","btn","btnActive","style","onClick","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase"],"sourceRoot":""}