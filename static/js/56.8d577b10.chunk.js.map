{"version":3,"file":"static/js/56.8d577b10.chunk.js","mappings":"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","sources":["components/Item/ModalItemAddForm/ModalItemAddForm.jsx","components/Section/ModalAddSectionForm/ModalAddSectionForm.jsx","Pages/MenuItems/MenuItems.styled.jsx","components/Section/ItemSections/ItemsSections.styled.jsx","components/Section/ModalChangeSectionName/ModalChangeSectionName.styled.jsx","components/Section/ModalSectionDelete/ModalSectionDelete.styled.jsx","components/Section/ModalSectionDelete/ModalSectionDelete.jsx","components/Section/ModalChangeSectionName/ModalChangeSectionName.jsx","components/Section/ItemSections/ItemsSections.jsx","components/Navbar/NavbarLive/NavbarLive.styled.jsx","components/Navbar/NavbarLive/NavbarLive.jsx","Pages/MenuItems/ToggleMenu/navState.jsx","Pages/MenuItems/ToggleMenu/ToggleButton.styled.jsx","Pages/MenuItems/ToggleMenu/ToggleButton.jsx","Pages/MenuItems/MenuItems.jsx"],"sourcesContent":["import { useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport { Form, FormInputList, FormInputLabel, FormInput } from \"components/common/GeneralStyle/Input.styled\";\nimport {\n  // useSelector, \n  useDispatch } from 'react-redux';\n// import { getFilteredItems } from 'redux/items/items-selector';\n\nimport { addItems } from \"redux/items/items-operation\"; \nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { Button } from \"components/Button/Button\";\n\n\nexport default function ModalItemAddForm ({\n  // onClick,\n   setModalActive, category, itemsCategory}) {\n  // const items = useSelector(getFilteredItems);\n  // console.log(\"category\", category)\n  console.log(itemsCategory)\n  const dispatch = useDispatch();\n\n  const [itemName, setItemName] = useState('');\n  const [price, setPrice] = useState('');\n  const [description, setDescription] = useState('');\n  const [section, setSection] = useState(category)\n// console.log(section)\n  // const [datat, setDatat] = useState({\n  //   name: '',\n  //   description: '',\n  //   phone: '',\n\n  // });\n\n  const itemNameID = nanoid();\n  const priceID = nanoid();\n  const descriptionID = nanoid();\n\n  const handleChange = (e) => {\n        const { name } = e.currentTarget;\n        switch (name) {\n          case 'itemName':\n            setItemName ( e.currentTarget.value);\n            break;\n            case 'description':\n              setDescription (e.currentTarget.value);\n            break;\n          case 'price':\n            setPrice (e.currentTarget.value);\n            break;\n          default:\n            break;\n        }\n      };\n\n  const handleSubmit = (e) => {\n\n    // const { name, description, phone } = values;\n\n    // const data = new FormData();\n\n    // data.append('name', name);\n    // data.append('description', description);\n    // data.append('phone', phone);\n\n        e.preventDefault()\n        \n        const duplicateItems = itemsCategory.find(itemCategory => itemCategory.itemName.toLocaleLowerCase() === itemName.toLocaleLowerCase());\n      \n       \n          if (duplicateItems) {\n            Notify.failure(`${itemName} is already in item`)\n            return\n          }\n          if (description === \"\") {\n            setSection (category)\n            dispatch(addItems(\n              {itemName, price, section}\n              ));\n              setItemName('');\n            // setDescription('');\n            setPrice('');\n            setSection('');\n            setModalActive(false);\n          }\n          else {\n            setSection (category)\n            dispatch(addItems(\n             {itemName, description, price, section}\n              ));\n              setItemName('');\n              setDescription('');\n              setPrice('');\n              setSection('');\n              setModalActive(false);\n          }\n      }; \n  \n     \n      return ( \n        <Form \n        onClick={e => e.stopPropagation()}\n        onSubmit={handleSubmit}\n        >\n          <>\n        <FormInputList>\n          <FormInputLabel htmlFor={itemNameID}>Name</FormInputLabel>\n          <FormInput \n          id={itemNameID} \n          type=\"text\" \n          name=\"itemName\" \n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          value={itemName} \n          onChange={handleChange} />\n        </FormInputList>\n        <FormInputList>\n          <FormInputLabel htmlFor={descriptionID}>Description</FormInputLabel>\n          <FormInput \n          id={descriptionID} \n          type=\"text\" \n          name=\"description\" \n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          value={description} \n          onChange={handleChange} />\n        </FormInputList>\n        <FormInputList>\n          <FormInputLabel htmlFor={priceID}>Price</FormInputLabel>\n          <FormInput \n          id={priceID} \n          type=\"number\" \n          name=\"price\" \n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          value={price} \n          onChange={handleChange} \n          required/>\n        </FormInputList>\n\n        <Button \n        style={{\n          position: 'relative',\n          marginTop: '10px',\n          right: '0px',\n          \n        }}\n    \n      text=\"Add Item\"\n      type=\"submit\"\n      // onClick={() => setModalSectionActive(true)}\n      />\n        {/* <button \n        // onClick={values => handleSubmit(values)}\n        className={scss.formBtn}\n        type=\"submit\">Add</button> */}\n        </>\n        </Form>\n        )\n};","import { useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport { Form, FormInputList, FormInputLabel, FormInput } from \"components/common/GeneralStyle/Input.styled\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getSections } from 'redux/sections/sections-selector';\nimport { addSection } from \"redux/sections/sections-operation\"; \nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { Button } from \"components/Button/Button\";\n\nexport default function ModalAddSectionForm ({onClick, setModalSectionActive}) {\n  // console.log(setModalSectionActive)\n  const sections = useSelector(getSections);\n  // console.log(sections)\n  \n  const dispatch = useDispatch();\n\n  const [category, setCategory] = useState('');\n  \n\n  // const [datat, setDatat] = useState({\n  //   name: '',\n  //   description: '',\n  //   phone: '',\n\n  // });\n\n  const sectionNameID = nanoid();\n;\n\n  const handleChange = (e) => {\n        const { name } = e.currentTarget;\n        switch (name) {\n          case 'category':\n            setCategory ( e.currentTarget.value);\n            break;\n          default:\n            break;\n        }\n      };\n\n  const handleSubmit = (e) => {\n\n    // const { name, description, phone } = values;\n\n    // const data = new FormData();\n\n    // data.append('name', name);\n    // data.append('description', description);\n    // data.append('phone', phone);\n\n        e.preventDefault()\n        const duplicateSections = sections.find(section => section.category.toLocaleLowerCase() === category.toLocaleLowerCase());\n      \n       \n          if (duplicateSections) {\n            Notify.failure(`${category} is already in item`)\n            return\n          }\n              dispatch(addSection({category}));\n              setCategory('');\n              setModalSectionActive(false);\n          \n      }; \n\n\n      return ( \n        <Form \n        onClick={e => e.stopPropagation()}\n        onSubmit={handleSubmit}\n        >\n          <>\n        <FormInputList>\n          <FormInputLabel htmlFor={sectionNameID}>Name</FormInputLabel>\n          <FormInput \n          id={sectionNameID} \n          type=\"text\" \n          name=\"category\" \n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          value={category} \n          onChange={handleChange} />\n        </FormInputList>\n       \n        <Button \n        style={{\n          position: 'relative',\n          right: '0px',\n          height: '25px',\n          padding: '0px 0px',\n          minWidth: '80px',\n          fontSize: 15,\n          color: '#010101',\n        }}\n    \n      text=\"Add\"\n      type=\"submit\"\n      // onClick={() => setModalActive(true)}\n      />\n        {/* <button \n        // onClick={values => handleSubmit(values)}\n        className={scss.formBtn}\n        type=\"submit\">Add</button> */}\n        </>\n        </Form>\n        )\n};","import styled, { css } from 'styled-components';\n\n\nexport const Sections = styled.div`\n/* color: white; */\n    /* color: rgb(38, 146, 179); */\n    display: flex;\n    margin-top: 25px;\n    /* margin-left: 15px; */\n    padding-left: 5px;\n    padding-right: 5px;\n`\n export const BtnAddSection = styled.button`\n\n padding: 10px 10px;\n border: none;\n    border-radius: 5px;\n    background-color: ${props => props.theme.colors.btn};\n        &:hover,\n       &:focus {\n        background-color: ${props => props.theme.colors.btnActive};\n        cursor: pointer;\n  }\n `   \n\n \n\nexport const SectionWrap = styled.div`\n  width: 100%;\n\n  transition: \n  width 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);\n  ${props =>\n    props.close &&\n    css`\n      width: 50px;\n    `}\n\n\n`\n\n\nexport const SectionForm = styled.div`\nbox-sizing: border-box;\n    border: 4px;\n    width: 150px;\n    padding-top: 25px;\n    /* display: none; */\n    opacity: 1;\n    /* position: fixed; */\n  /* top: 0; */\n  /* left: 0; */\n  /* width: 100%; */\n  height: 100vh;\n  background-color: #cbcbcb;\n\n  /* transform: translateX(0); */\n\n  transition: \n  transform 0.3s cubic-bezier(0.645, 0.045, 0.355, 1),\n  opacity 0.3s;\n\n  ${props =>\n    props.close &&\n    css`\n      transform: translateX(-100%);\n      opacity: 0;\n    `}\n`\n\n","import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n// import {MdOutlineDriveFileRenameOutline} from 'react-icons/md';\nimport {CiEdit} from 'react-icons/ci';\nimport {MdDeleteForever} from 'react-icons/md';\n\n\n\nexport const Wrapper = styled.div`\n  position: relative;\n\n`;\n\nexport const FilterList = styled.li`\n\n  list-style: none;\n  display: flex;\n  /* &:not(:last-child) { */\n    margin-bottom: 5px;\n/* } */\n  /* justify-content: flex-start; */\n  /* align-items: center; */\n  /* flex-wrap: wrap; */\n  /* gap: 12px; */\n\n`;\n\nexport const Item = styled.li`\n  display: flex;\n`;\n\nexport const Button = styled(NavLink)`\n/* list-style: none; */\nborder: none;\nwidth: 100%;\ncolor: #181515;\nfont-weight: 900;\n  line-height: 1.35;\n  letter-spacing: 0.04em;\n  \n  border-radius: 5px;\n  transition: color 250ms linear, background-color 250ms linear;\n      &:hover,\n       &:focus {\n        background-color: ${props => props.theme.colors.btnActive};\n        cursor: pointer;\n  }\n\n  &.active {\n   color: #573131;\n   background-color: #749574;\n  }\n\n`;\nexport const CommonLinks = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  flex-wrap: wrap-reverse;\n  gap: 12px;\n \n`;\nexport const AuthLinks = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  gap: 12px;\n`;\n// const Change = ({ className }) => <MdOutlineDriveFileRenameOutline className={className} />;\nexport const BtnChange = styled.button`\n  border: none;\n  background-color: transparent;\n`\nexport const StyledChange = styled(CiEdit)`\n  color: red;\n  \n`\nexport const DelSection = styled(MdDeleteForever)`\n  color: red;\n  \n`","import styled from 'styled-components';\n\n\n\nexport const BtnList = styled.div`\n  margin-top: 10px;\n`","import styled from 'styled-components';\n\nexport const TextWrapper = styled.div`\n    width: 250px;\n    height: 100px;\n    /* border: 1px solid #749574; */\n`\nexport const Text = styled.p`\nmargin-top: 30px;\nmargin-bottom: 20px;\n    font-size: 15px;\n`","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { deleteSection } from 'redux/sections/sections-operation';\nimport { delItemsByCategory } from 'redux/items/items-operation';\nimport { Button } from 'components/Button/Button';\nimport { Text, TextWrapper } from './ModalSectionDelete.styled';\nexport default function ModalSectionDelete({ _id, closeModal }) {\n  const dispatch = useDispatch();\n  console.log(_id);\n  function DelSection() {\n    dispatch(delItemsByCategory(_id));\n    dispatch(deleteSection(_id));\n    closeModal();\n  }\n\n  return (\n    <TextWrapper onClick={e => e.stopPropagation()}>\n      <Text>Do you really wont to delete? All items will also be deleted\n      </Text>\n\n      <Button\n        style={{\n          marginRight: '25px',\n          position: 'relative',\n          right: '0px',\n          height: '25px',\n          padding: '0px 0px',\n          minWidth: '80px',\n          fontSize: 15,\n          color: '#010101',\n        }}\n        text=\"Yes\"\n        type=\"button\"\n        onClick={() => {\n          DelSection();\n        }}\n      />\n      <Button\n        style={{\n          position: 'relative',\n          right: '0px',\n          height: '25px',\n          padding: '0px 0px',\n          minWidth: '80px',\n          fontSize: 15,\n          color: '#010101',\n        }}\n        text=\"No\"\n        type=\"button\"\n        onClick={() => closeModal()}\n      />\n    </TextWrapper>\n  );\n}\n","import { useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport { Form, FormInputList, FormInput, FormInputLabel, LabelName } from \"components/common/GeneralStyle/Input.styled\";\nimport {\n  useSelector, \n  useDispatch } from 'react-redux';\nimport { getSections } from 'redux/sections/sections-selector';\nimport { updateSection } from \"redux/sections/sections-operation\"; \nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { BtnList } from \"./ModalChangeSectionName.styled\";\nimport { Modal } from \"components/common/Modal/Modal\";\nimport ModalSectionDelete from \"../ModalSectionDelete/ModalSectionDelete\";\n  import { Button } from \"components/Button/Button\";\n\nexport default function ModalChangeSectionName ({ \n   category, \n   _id,\n   closeModal\n  }) {\n  const sections = useSelector(getSections);\n  \n  const dispatch = useDispatch();\n\n  const [newSectionName, setNewSectionName] = useState(category);\n  const [modalDeleteActive, setModalDeleteActive] = useState(false);\n\n  const sectionNameID = nanoid();\n  console.log(category)\n \n  const handleChange = (e) => {\n        const { name } = e.currentTarget;\n        switch (name) {\n          case 'newSectionName':\n            setNewSectionName ( e.currentTarget.value);\n            break;\n          default:\n            break;\n        }\n      };\n\n  const handleSubmit = (e) => {\n\n        e.preventDefault()\n        const duplicateItems = sections.find(section => section.category.toLocaleLowerCase() === newSectionName.toLocaleLowerCase());\n      \n       \n          if (duplicateItems) {\n            Notify.failure(`${newSectionName} is already in item`)\n            return\n          }\n\n            dispatch(updateSection(\n              {_id, \n                category: newSectionName,              \n              } ));\n                setNewSectionName('');\n              closeModal ();\n      }; \n      \n      function closeModalDelete () {\n        setModalDeleteActive(false)\n        document.body.style.overflow = '';\n      };\n\n      return ( \n        <Form \n        onClick={e => e.stopPropagation()}\n        onSubmit={handleSubmit}\n        >\n          <>\n        <FormInputList>\n          <FormInputLabel htmlFor={sectionNameID}><LabelName>Change Name</LabelName></FormInputLabel>\n          <FormInput \n          id={sectionNameID} \n          type=\"text\" \n          name=\"newSectionName\" \n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may \"\n          required\n          defaultValue={category}\n          onChange={handleChange} />\n        </FormInputList>\n        \n<BtnList>\n        <Button \n        style={{\n          position: 'relative',\n          right: '0px',\n          height: '25px',\n          padding: '0px 0px',\n          minWidth: '80px',\n          fontSize: 15,\n          color: '#010101',\n          marginRight: 'auto',\n          marginLeft: 'auto',\n          \n        }}\n    \n      text=\"Rename\"\n      type=\"submit\"\n      />\n      <Button \n        style={{\n          position: 'relative',\n          right: '0px',\n          height: '25px',\n          minWidth: '110px',\n          fontSize: 15,\n          color: '#632121',\n          marginRight: 'auto',\n          marginLeft: '25px',\n        }}\n    \n      text=\"Delete Section\"\n      type=\"button\"\n      onClick={() => setModalDeleteActive(true)}\n      />\n   </BtnList>\n              { modalDeleteActive && (\n          <Modal\n          onClick={() => closeModalDelete ()}\n          active={modalDeleteActive}\n          setActive={setModalDeleteActive}>\n          <ModalSectionDelete\n          closeModal={closeModalDelete}\n          _id={_id}\n          category={category}\n          />\n          </Modal>\n         )}\n        </>\n        </Form>\n        )\n};","import {useState} from 'react';\nimport { \n  // useSelector,\n  useDispatch} from 'react-redux';\n// import { getSections } from 'redux/sections/sections-selector';\n// import { selectIsLoggedIn } from 'redux/auth/authSelectors';\nimport { nanoid } from 'nanoid';\nimport {\n  Button,\n  FilterList,\n  StyledChange,\n  BtnChange,\n  // Item,\n  // Wrapper,\n  // AuthLinks,\n  // CommonLinks,\n} from './ItemsSections.styled';\nimport { Modal } from 'components/common/Modal/Modal';\nimport ModalChangeSectionName from '../ModalChangeSectionName/ModalChangeSectionName';\n// import { useEffect } from \"react\";\n// import {  geItemsByCategory } from \"redux/items/items-operation\";\nimport { fetchSections } from \"redux/sections/sections-operation\"\n\n// const btnId = nanoid();\n// const sectionId = nanoid();\n\n\n\nfunction ItemsSections({section}) {\n  // const sections = useSelector(getSections);\n  // console.log(section)\n  const [ModalChangeSectionActive, setModalChangeSectionActive] = useState(false);\n  const dispatch = useDispatch();\n  function closeModal () {\n    setModalChangeSectionActive(false)\n    \n    document.body.style.overflow = '';\n    dispatch(fetchSections());\n  }\n  const { \n    _id,\n    category,\n  } = section;\n  // console.log(category)\n\n  const buttons = [\n    {\n      btn: category,\n      link: _id,\n    }\n  \n  ];\n  // const isLoggedIn = useSelector(selectIsLoggedIn);\n\n  return (\n    \n      <FilterList key={nanoid()}>\n        \n        \n          {buttons.map(b => (\n            // <Item key={btnId}>\n              <Button \n              key={nanoid()}\n              to={'/items/' + b.link} name={b.link}>\n                {b.btn}\n              </Button>\n              \n            //  </Item>\n          ))}\n          <BtnChange\n          key={nanoid()}\n          onClick={() => setModalChangeSectionActive(true)}>\n                <StyledChange/>\n              </BtnChange>\n              { ModalChangeSectionActive && (\n          <Modal\n          onClick={() => closeModal ()}\n          active={ModalChangeSectionActive}\n          setActive={setModalChangeSectionActive}>\n          <ModalChangeSectionName\n          closeModal={closeModal}\n          _id={_id}\n          category={category}\n          />\n     \n          </Modal>\n         )}\n        \n      </FilterList>\n    \n  );\n}\n\nexport default ItemsSections;\n","import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const ToLiveLinkList = styled.div`\n    display: flex;\n    flex-direction: row-reverse;\n\n`\nexport const ToLiveLink = styled(NavLink)`\n    position: relative;\n    top: 5px;\n    right: 15px;\n    font-weight: 900;\n    color: #181515;\n    &:hover,\n       &:focus {\n        color: ${props => props.theme.colors.btnActive};\n        cursor: pointer;\n  }\n`","// import items from \"./items\"\nimport { nanoid } from \"nanoid\";\n// import { NavLink } from \"react-router-dom\"\nimport { getUser } from \"redux/auth/auth-selector\";\nimport { useSelector } from \"react-redux\";\nimport { ToLiveLink, ToLiveLinkList } from \"./NavbarLive.styled\";\n\n\n\nexport default function NavbarLive() {\n  const user = useSelector(getUser);\n  console.log(user)\n  const chekName = Boolean(user)\n  const items = chekName ? [\n   \n    {id: nanoid(),\n      to: `/live/${user._id}`,\n      text: \"Go to QR Menu\",\n  },\n   \n    ] : \"\";\n\n\n  \n  return (\n    <ToLiveLinkList>\n      {chekName ? items.map(({id, to, text}) => {\n            return (\n                // <li  key={id}>\n                    <ToLiveLink  \n                    target=\"_blank\"\n                    rel=\"noreferrer noopener\"\n                    to={to}\n                    end>\n                      {text}\n                     </ToLiveLink>\n                // </li>\n            )})\n         : <></> }\n\n        \n    </ToLiveLinkList>\n  )\n}","import React, { createContext, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const MenuContext = createContext({\n  isMenuClose: true,\n  toggleMenu: () => {},\n});\n\nconst NavState = ({ children }) => {\n  const [isMenuClose, toggleMenu] = useState(false);\n\n  function toggleMenuMode() {\n    toggleMenu(!isMenuClose);\n  }\n\n  return (\n    <MenuContext.Provider value={{ isMenuClose, toggleMenuMode }}>{children}</MenuContext.Provider>\n  );\n};\n\nNavState.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default NavState;","import styled from 'styled-components';\nimport { TbArrowsLeft } from \"react-icons/tb\";\nimport { TbArrowsRight } from \"react-icons/tb\";\n\nexport const MenuButton = styled.button`\nposition: absolute;\n z-index: 1000;\n  display: block;\n  transform-origin: 16px 11px;\n  /* float: left; */\n  /* margin-right: 29px; */\n  outline: 0;\n  border: 0;\n  padding: 5px;\n  background: none;\n\n  span {\n    transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);\n  }\n\n  /* :focus {\n    border: medium none rgb(111, 255, 176);\n    box-shadow: rgb(111, 255, 176) 0 0 2px 2px;\n    outline: 0;\n  } */\n\n  &:hover,\n  :focus{\n    border: medium none rgb(111, 255, 176);\n    box-shadow: rgb(111, 255, 176) 0 0 2px 2px;\n    /* outline: 0; */\n    /* span:nth-of-type(1) {\n      width: 33px;\n    }\n\n    span:nth-of-type(2) {\n      width: 40px;\n    }\n\n    span:nth-of-type(3) {\n      width: 30px;\n    } */\n  }\n\n  &.active {\n\n    /* span:nth-of-type(1) {\n      transform: rotate(45deg) translate(10px, 10px);\n      width: 40px;\n    }\n\n    span:nth-of-type(2) {\n      opacity: 0;\n      pointer-events: none;\n    }\n\n    span:nth-of-type(3) {\n      transform: rotate(-45deg) translate(7px, -7px);\n      width: 40px;\n    } */\n  }\n`;\n\n// export const Bar = styled.span`\n//   display: block;\n//   width: 40px;\n//   height: 5px;\n//   margin-bottom: 7px;\n//   background-color: #6b0707;\n// `;\n\nexport const BarOpen  = styled(TbArrowsRight)`\n  \n`\nexport const BarClose  = styled(TbArrowsLeft)`\n  \n\n`","import React, { useContext } from 'react';\n// import styled from 'styled-components';\nimport { MenuContext } from './navState';\nimport { MenuButton, BarClose, BarOpen } from './ToggleButton.styled';\n\n\nconst HamburgerButton = () => {\n  const { isMenuClose, toggleMenuMode } = useContext(MenuContext);\n\n  const clickHandler = () => {\n    toggleMenuMode();\n  };\n\n  return (\n    <MenuButton\n      // className={isMenuOpen ? 'active' : ''}\n    //   aria-label=\"Открыть главное меню\"\n      onClick={clickHandler}\n    >{isMenuClose ? <BarOpen />  : <BarClose />} \n      {/* <BarClose />\n      <BarOpen /> */}\n      {/* <Bar />\n      <Bar /> */}\n    </MenuButton>\n  );\n};\n\nexport default HamburgerButton;","import  ModalItemAddForm  from \"../../components/Item/ModalItemAddForm/ModalItemAddForm\"\nimport ModalAddSectionForm from \"components/Section/ModalAddSectionForm/ModalAddSectionForm\"\nimport {   fetchItems, } from \"redux/items/items-operation\"\nimport { Sections, SectionForm, SectionWrap} from \"./MenuItems.styled\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEffect, useState } from \"react\";\nimport {  getItemsByCategory } from 'redux/items/items-selector';\nimport { getSections } from \"redux/sections/sections-selector\"\nimport { Modal } from \"components/common/Modal/Modal\";\nimport ItemsSections from \"components/Section/ItemSections/ItemsSections\"\nimport { useLocation } from 'react-router-dom'\nimport { fetchSections } from \"redux/sections/sections-operation\"\nimport MenuItemsDetails from \"components/MenuItemsDetails/MenuItemsDetails\"\nimport NavbarLive from \"components/Navbar/NavbarLive/NavbarLive\"\nimport { Button } from \"components/Button/Button\";\n\nimport React, { \n  // useRef,\n   useContext } from 'react';\n// import styled , { css } from 'styled-components';\n// import useOnClickOutside from './ToggleMenu/onClickOutside';\nimport { MenuContext } from \"./ToggleMenu/navState\";\nimport HamburgerButton from './ToggleMenu/ToggleButton';\n// import { SideMenu } from './ToggleMenu/SideMenu';\nimport NavState from \"Pages/MenuItems/ToggleMenu/navState\";\n\n\n\n\nexport default function MenuItems() {\n\n  // const node = useRef();\n  // const { isMenuClose } = useContext(MenuContext);\n  // console.log(isMenuOpen)\n  // useOnClickOutside(node, () => {\n  //   // Only if menu is open\n  //   if (isMenuOpen) {\n  //     toggleMenuMode();\n  //   }\n  // });\n\n  const location = useLocation();\n  const category = location.pathname.split('/')[2];\n  // console.log(\"category\", category)\n  const [modalActive, setModalActive] = useState(false);\n  const [modalAddSectionActive, setModalAddSectionActive] = useState(false);\n  // const [ModalChangeSectionActive, setModalChangeSectionActive] = useState(false);\n\n\n  const dispatch = useDispatch();\n  const itemsCategory = useSelector(getItemsByCategory);\n  console.log(itemsCategory)\n  const   sections = useSelector(getSections);\nconst sect = sections.map(({_id, category}) => ({_id, category}));\nconsole.log(sect)\nconsole.log(sections)\n  const SideMenu = () => {\n    const { isMenuClose } = useContext(MenuContext);\n    console.log(isMenuClose)\n  \n    return (\n  <>\n      <SectionWrap \n      // ref={node}\n      close={isMenuClose}\n      >\n         <HamburgerButton\n         close={isMenuClose}\n         />\n  <SectionForm close={isMenuClose}\n      >\n        <ul>\n          {sections.map(section =>\n           <ItemsSections\n           section={section}\n           ></ItemsSections>)\n        }\n        </ul>\n        <Button \n        style={{\n          position: 'relative',\n          right: '0px',\n          height: '25px',\n          padding: '0px 0px',\n          minWidth: '100px',\n          fontSize: 15,\n          color: '#010101'\n        }}\n    \n      text=\"Add Section\"\n      type=\"button\"\n      onClick={() => setModalAddSectionActive(true)}\n      />\n       </SectionForm>\n      </SectionWrap>\n      </>\n \n  );\n  };;\n\n  \n\n\n  function closeModal () {\n    setModalActive(false)\n    setModalAddSectionActive(false)\n    // setModalChangeSectionActive(false)\n    document.body.style.overflow = '';\n  }\n\n  \n\n      useEffect(() => {\n          dispatch(fetchItems());\n          dispatch(fetchSections());\n          }, \n           [ dispatch\n            \n          ]\n          );\n\n  return (\n  \n    <>\n    <NavbarLive/>\n    <Sections  >\n     \n    <NavState>\n  \n       <SideMenu />\n      \n      { modalAddSectionActive && (\n        <Modal\n        onClick={() => closeModal ()}\n        active={modalAddSectionActive}\n        setActive={setModalAddSectionActive}>\n        <ModalAddSectionForm \n        onClick={e => e.stopPropagation()}\n        setModalSectionActive={setModalAddSectionActive}\n        />\n        </Modal>\n      )}\n      { modalActive && (\n        <Modal\n        onClick={() => closeModal ()}\n        active={modalActive}\n        setActive={setModalActive}>\n        <ModalItemAddForm \n        onClick={e => e.stopPropagation()}\n        setModalActive={setModalActive}\n        category={category}\n        itemsCategory={itemsCategory}\n        />\n        </Modal>\n      )}\n    \n      <MenuItemsDetails \n      setModalActive={setModalActive}\n      />\n      </NavState>\n    </Sections>\n    </>\n    )\n};"],"names":["ModalItemAddForm","_ref","setModalActive","category","itemsCategory","console","log","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","itemName","setItemName","_useState3","_useState4","price","setPrice","_useState5","_useState6","description","setDescription","_useState7","_useState8","section","setSection","itemNameID","nanoid","priceID","descriptionID","handleChange","e","currentTarget","name","value","_jsx","Form","onClick","stopPropagation","onSubmit","preventDefault","find","itemCategory","toLocaleLowerCase","Notify","concat","addItems","children","_jsxs","_Fragment","FormInputList","FormInputLabel","htmlFor","FormInput","id","type","pattern","title","required","onChange","Button","style","position","marginTop","right","text","ModalAddSectionForm","setModalSectionActive","sections","useSelector","getSections","setCategory","sectionNameID","addSection","height","padding","minWidth","fontSize","color","Sections","styled","_templateObject","_taggedTemplateLiteral","SectionWrap","_templateObject2","props","theme","colors","btn","btnActive","_templateObject3","close","css","_templateObject4","SectionForm","_templateObject5","_templateObject6","FilterList","NavLink","BtnChange","_templateObject7","StyledChange","CiEdit","_templateObject8","BtnList","MdDeleteForever","_templateObject9","TextWrapper","Text","ModalSectionDelete","_id","closeModal","marginRight","delItemsByCategory","deleteSection","ModalChangeSectionName","newSectionName","setNewSectionName","modalDeleteActive","setModalDeleteActive","closeModalDelete","document","body","overflow","updateSection","LabelName","defaultValue","marginLeft","Modal","active","setActive","ModalChangeSectionActive","setModalChangeSectionActive","fetchSections","buttons","link","map","b","to","ToLiveLinkList","ToLiveLink","NavbarLive","user","getUser","chekName","Boolean","items","target","rel","end","MenuContext","createContext","isMenuClose","toggleMenu","Provider","toggleMenuMode","MenuButton","BarOpen","TbArrowsRight","BarClose","TbArrowsLeft","_useContext","useContext","MenuItems","useLocation","pathname","split","modalActive","modalAddSectionActive","setModalAddSectionActive","getItemsByCategory","sect","SideMenu","HamburgerButton","ItemsSections","useEffect","fetchItems","NavState","MenuItemsDetails"],"sourceRoot":""}