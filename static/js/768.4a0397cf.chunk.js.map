{"version":3,"file":"static/js/768.4a0397cf.chunk.js","mappings":"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","sources":["webpack://project1/./src/components/ContactForm/ContactForm.module.scss?6b75","redux/contacts/contacts-selector.js","components/ContactForm/ContactForm.jsx","webpack://project1/./src/components/ContactList/ContactList.module.scss?e1a7","redux/filter/filter-selector.js","components/ContactList/ContactList.jsx","webpack://project1/./src/components/filter/Filter.module.scss?f3f1","components/filter/Filter.jsx","webpack://project1/./src/Pages/Contacts/Contacts.module.scss?edcc","Pages/Contacts/Contacts.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__zqkUM\",\"formInput\":\"ContactForm_formInput__4newl\",\"formInputName\":\"ContactForm_formInputName__MS9gi\",\"formInputTel\":\"ContactForm_formInputTel__QLeAr\",\"formBtn\":\"ContactForm_formBtn__EULMB\"};","export const getContacts = ({contacts}) => contacts.items;\nexport const getState = ({contacts}) => ({loading: contacts.loading, error: contacts.error});\nexport const getFilteredContacts = ({filter, contacts}) => {   \n    if (!filter) \n    {return contacts.items};\n};","import { useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport scss from \"./ContactForm.module.scss\"\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getFilteredContacts } from 'redux/contacts/contacts-selector';\nimport { addContacts } from \"redux/contacts/contacts-operation\"; \nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nexport default function ContactForm () {\n  const contacts = useSelector(getFilteredContacts);\n  \n  const dispatch = useDispatch();\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const nameID = nanoid();\n  const telID = nanoid();\n\n  const handleChange = (e) => {\n        const { name } = e.currentTarget;\n        switch (name) {\n          case 'name':\n            setName(e.currentTarget.value);\n            break;\n          case 'number':\n            setNumber(e.currentTarget.value);\n            break;\n          default:\n            break;\n        }\n      };\n\n  const handleSubmit = (e) => {\n        e.preventDefault()\n        const duplicateContacts = contacts.find(contact => contact.name.toLocaleLowerCase() === name.toLocaleLowerCase());\n      console.log(duplicateContacts)\n        console.log(contacts)\n          if (duplicateContacts) {\n            Notify.failure(`${name} is already in contact`)\n            // alert (`${name} is already in contact`)\n            return\n          }\n          else {\n            dispatch(addContacts({ name, number }));\n            setName('');\n            setNumber('');\n          }\n      }; \n\n      return ( \n        <form \n        className={scss.form}\n        onSubmit={handleSubmit}>\n        <div className={scss.formInput}>\n          <label htmlFor={nameID}>Name</label>\n          <input \n          className={scss.formInputName}\n          id={nameID} \n          type=\"text\" \n          name=\"name\" \n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          value={name} \n          onChange={handleChange} />\n        </div>\n        <div className={scss.formInput}>\n          <label htmlFor={telID}>Phone</label>\n          <input \n          className={scss.formInputTel}\n          id={telID} \n          type=\"number\" \n          name=\"number\" \n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          value={number} \n          onChange={handleChange} \n          required/>\n        </div>\n        <button \n        className={scss.formBtn}\n        type=\"submit\">Add</button>\n        </form>\n        )\n};","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"ContactList_contactList__lfyFV\",\"delContacts\":\"ContactList_delContacts__526Mc\"};","export const getFilter = store => store.filter;","import scss from \"./ContactList.module.scss\"\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getContacts } from 'redux/contacts/contacts-selector';\nimport  { getFilter }from 'redux/filter/filter-selector';\nimport { deleteContact } from \"redux/contacts/contacts-operation\"; \n\n export const ContactList = () => {\n    \n    const contacts = useSelector(getContacts);\n    const filter = useSelector(getFilter);\n    const dispatch = useDispatch();\n\n    const getFilteredContact = () => {\n        if (!filter) {\n          return contacts;\n        }\n            const normalizedFilter = filter.toLocaleLowerCase();\n            const filteredContact = contacts.filter(({name}) => {\n            const nornalizedName = name.toLocaleLowerCase();\n            const result = nornalizedName.includes(normalizedFilter);\n            return result;\n          })\n          return filteredContact;\n        };\n\n    return (\n            <ul>\n            {getFilteredContact().map(({name, number, id}) => (\n            <li className={scss.contactList} key={id}> \n            <b>Name:</b>  {name} <br />\n            <b className={scss.tel}>Tel:</b> {number} \n            <span className={scss.delContacts} onClick={() => { dispatch(deleteContact(id)); }}>Delete</span></li>\n    ))\n    }\n         </ul>)\n         }","// extracted by mini-css-extract-plugin\nexport default {\"contactFilterInput\":\"Filter_contactFilterInput__A7VY6\",\"contactFilterLabel\":\"Filter_contactFilterLabel__EgZcb\",\"contactFilter\":\"Filter_contactFilter__CK3n0\"};","import scss from \"./Filter.module.scss\"\nimport { useSelector, useDispatch } from 'react-redux';\nimport  { getFilter }from 'redux/filter/filter-selector';\nimport { nanoid } from \"nanoid\";\nimport { setFilter } from \"redux/filter/filter-slice\";\n\nconst Filter = () => {\n\n    const filters = useSelector(getFilter);\n    const dispatch = useDispatch();\n\n    const findID = nanoid();\n\n    const  handleChange = (e) => {\n        const {value} = e.target;\n        dispatch(setFilter(value))\n      };\n\nreturn (\n    <div className={scss.contactFilter}>\n              <label\n              className={scss.contactFilterLabel}\n              htmlFor={findID}\n              >Find contacts by name\n              </label>\n              <input \n              className={scss.contactFilterInput}\n              type=\"text\" \n              name=\"filter\" \n              value={filters}\n              onChange={handleChange}\n              title=\"Search\"\n              required\n              />\n          </div>\n)};\n\n  export default Filter;","// extracted by mini-css-extract-plugin\nexport default {\"phoneBook\":\"Contacts_phoneBook__+krXn\",\"titlePhoneBook\":\"Contacts_titlePhoneBook__zzISd\",\"contactForm\":\"Contacts_contactForm__Pmztk\",\"contacts\":\"Contacts_contacts__B9d10\",\"contactsLoading\":\"Contacts_contactsLoading__GlHiY\"};","// import { useEffect } from \"react\";\nimport  ContactForm  from \"../../components/ContactForm/ContactForm\"\nimport {ContactList} from \"../../components/ContactList/ContactList\"\nimport { fetchContacts } from \"redux/contacts/contacts-operation\"\nimport Filter from \"../../components/filter/Filter\"\nimport scss from \"./Contacts.module.scss\"\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEffect } from \"react\";\nimport { getState } from 'redux/contacts/contacts-selector';\nimport { getContacts } from 'redux/contacts/contacts-selector';\n// import UseAuth from \"components/hooks/useAuth\"\n// import { Navigate } from \"react-router-dom\"\n\nexport default function Contacts() {\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n const {loading, error} = useSelector(getState);\n      useEffect(() => {\n          dispatch(fetchContacts());\n          }, [dispatch]);\n  return (\n    <div  className={scss.phoneBook}>\n      <div className={scss.contactForm}>\n      <h2 className={scss.titlePhoneBook}>PhoneBook</h2>\n        <ContactForm />\n      </div>\n      <div className={scss.contacts}>\n      <h2>Contacts</h2>\n        <Filter />\n          {!loading && contacts.length > 0 && <ContactList />}\n          {loading && <p className={scss.contactsLoading}>...loading</p>}\n          {error && <p>oops, something went wrong</p>}\n      </div>\n    </div>\n    )\n};","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["getContacts","contacts","items","getState","loading","error","getFilteredContacts","filter","ContactForm","useSelector","dispatch","useDispatch","useState","name","setName","number","setNumber","nameID","nanoid","telID","handleChange","e","currentTarget","value","className","scss","onSubmit","preventDefault","duplicateContacts","find","contact","toLocaleLowerCase","console","log","Notify","addContacts","htmlFor","id","type","pattern","title","required","onChange","getFilter","store","ContactList","normalizedFilter","includes","getFilteredContact","map","onClick","deleteContact","filters","findID","target","setFilter","Contacts","useEffect","fetchContacts","length","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase"],"sourceRoot":""}