{"version":3,"file":"static/js/812.7726423f.chunk.js","mappings":"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","sources":["Pages/Registration/Registration.styled.jsx","Pages/Registration/Registration.jsx","components/Button/Button.styled.jsx","components/Button/Button.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Title = styled.h1`\n    color: white;\n    font-size: 25px;\n    margin-top: 25px;\n    margin-bottom: 25px;\n`\nexport const RegistrationPage = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n`\n\nexport const RegistrationFormLabelList = styled.div`\n    width: 90px;\n    font-weight: 600;\n   \n`\n    \n\nexport const RegistrationForm = styled.div`\n    display: flex;\n    align-items: center;\n    &:not(:last-child) {\n        margin-bottom: 10px;\n    }\n`\nexport const RegistrationFormWrapper = styled.div`\n    margin-bottom: 25px;\n`\nexport const RegistrationFormLabel = styled.label`\n    color: white;\n`\nexport const RegistrationFormInput = styled.input`\n    padding-left: 10px;\n    width: 200px;\n    height: 35px;\n border-radius: 5px;\n border: 1px solid #749574;\n`","import { useState } from 'react';\nimport { nanoid } from \"nanoid\";\nimport { useDispatch, \n  useSelector\n } from \"react-redux\";\nimport { register } from 'redux/auth/auth-operation';\nimport { \n  Title,\n  RegistrationPage,\n  RegistrationFormLabel, \n  RegistrationFormLabelList,\n  RegistrationForm,\n  RegistrationFormInput,\n  RegistrationFormWrapper } from './Registration.styled';\nimport { Button } from 'components/Button/Button';\n// import { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { isRegister } from 'redux/auth/auth-selector';\nimport { Navigate } from 'react-router-dom';\n// import { Modal } from 'components/Modal/Modal';\n// import ModalRegisterVerify from 'components/ModalRegisterVerify/ModalRegisterVerify';\n\nexport default function Registration() {\n\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  // const [modalActive, setModalActive] = useState('');\n\n  const nameId = nanoid();\n    const emailId = nanoid();\n    const passwordId = nanoid();\n\n  const dispatch = useDispatch();\n  const isUserRegister = useSelector(isRegister);\n\n  const handleChange = (event) => {\n    const { name, value } = event.currentTarget;\n\n    switch (name) {\n        case 'name':\n            setName(value);\n            break;\n        case 'email':\n            setEmail(value);\n            break;\n        case 'password':\n            setPassword(value);\n            break;\n        default:\n            setName('');\n            setEmail('');\n            setPassword('');\n    };\n};\n\nconst handleSubmit = (e) => {\n    e.preventDefault();\n    // console.log(\"reg\")\n    dispatch(register({ name: name, email: email, password: password }));    \n};\n\n// const openModal = () => {\n//   if (isUserRegister) {\n  \n//     //  return console.log(\"userRegister\")\n//       setModalActive(true)\n//     ;}\n//     else {\n//       console.log(\"enter name\")\n//     }\n// }\nif (isUserRegister) {\n  return <Navigate to=\"/register/verify\" />\n//  return console.log(\"userRegister\")\n\n  // setModalActive(true)\n;}\n\n  return (\n    <RegistrationPage>\n       <Title>Registration Form</Title> \n       <form\n       onSubmit={handleSubmit}>\n        <RegistrationFormWrapper>\n       <RegistrationForm >\n            {<RegistrationFormLabelList > <RegistrationFormLabel \n            htmlFor={nameId}\n            >Login </RegistrationFormLabel>\n            </RegistrationFormLabelList>}\n            <RegistrationFormInput \n            id={nameId} placeholder=\"Enter name\" name=\"name\" type=\"text\" required onChange={handleChange} value={name}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n             />\n        </RegistrationForm>\n        <RegistrationForm >\n            {<RegistrationFormLabelList ><RegistrationFormLabel \n            htmlFor={emailId}\n            >E-mail </RegistrationFormLabel></RegistrationFormLabelList>}\n            <RegistrationFormInput \n            id={emailId} placeholder=\"Enter email\" name=\"email\" type=\"email\" required onChange={handleChange} value={email}\n            pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$\"\n             />\n        </RegistrationForm>\n        <RegistrationForm >\n            {<RegistrationFormLabelList><RegistrationFormLabel \n            htmlFor={passwordId}\n            >Password </RegistrationFormLabel>\n            </RegistrationFormLabelList>}\n            <RegistrationFormInput \n            id={passwordId} placeholder=\"Enter password\" name=\"password\" type=\"password\" required onChange={handleChange} value={password}\n             />\n        </RegistrationForm>\n        </RegistrationFormWrapper>\n        <Button \n         style={{\n          height: '35px',\n        }}\n        text=\"Registration\"\n        type=\"button\"\n        />\n       </form>\n      \n\n  \n       \n       </RegistrationPage>\n  )\n}\n","import styled from 'styled-components';\n\nexport const Btn = styled.button`\n  padding: 0px 5px;\n  background-color: ${props => props.theme.colors.btn};\n    transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    border: none;\n    border-radius: 10px;\n    text-decoration: none;\n    cursor: pointer;\n    font-family: inherit;\n    /* font-weight: 800; */\n    min-width: 100px;\n    height: 25px;\n    box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2),\n      0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);\n      &:hover,\n       &:focus {\n        background-color: ${props => props.theme.colors.btnActive};\n        cursor: pointer;\n  }\n` \nexport const TextBtn = styled.p`\n  color: ${props => props.theme.colors.mainTextBtn};\n  font-size: 15px;\n  font-weight: 800;\n  /* line-height: 24px; */\n  /* font-style: normal; */\n\n`\n  \n  ","import { Btn, TextBtn } from './Button.styled';\nimport PropTypes from 'prop-types';\n\nexport const Button = ({style, text, type,\n  onClick\n}) => {\n  return (\n    <Btn \n    style={style}\n    onClick={onClick}\n    type={type}\n    >\n      <TextBtn>{text}</TextBtn>\n    </Btn>\n  );\n};\n\nButton.propTypes = {\n    onClick: PropTypes.func,\n  };","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["Title","styled","_templateObject","_taggedTemplateLiteral","RegistrationPage","_templateObject2","RegistrationFormLabelList","_templateObject3","RegistrationForm","_templateObject4","RegistrationFormWrapper","_templateObject5","RegistrationFormLabel","_templateObject6","RegistrationFormInput","_templateObject7","Registration","_useState","useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","email","setEmail","_useState5","_useState6","password","setPassword","nameId","nanoid","emailId","passwordId","dispatch","useDispatch","handleChange","event","_event$currentTarget","currentTarget","value","useSelector","isRegister","_jsx","Navigate","to","_jsxs","children","onSubmit","e","preventDefault","register","htmlFor","id","placeholder","type","required","onChange","pattern","Button","style","height","text","Btn","props","theme","colors","btn","btnActive","TextBtn","mainTextBtn","_ref","onClick","size","arguments","length","undefined","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}