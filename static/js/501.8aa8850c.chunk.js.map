{"version":3,"file":"static/js/501.8aa8850c.chunk.js","mappings":"wLACA,EAAuB,0BAAvB,EAA6D,+BAA7D,EAA4G,mCAA5G,EAA8J,kCAA9J,EAA0M,6B,UCD7LA,EAAc,SAAC,GAAD,SAAEC,SAAuBC,KAAzB,EACdC,EAAW,SAAC,GAAD,IAAEF,EAAF,EAAEA,SAAF,MAAiB,CAACG,QAASH,EAASG,QAASC,MAAOJ,EAASI,MAA7D,EACXC,EAAsB,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,OAAQN,EAAc,EAAdA,SACzC,IAAKM,EACJ,OAAON,EAASC,KACpB,E,6BCGc,SAASM,IACtB,IAAMP,GAAWQ,EAAAA,EAAAA,IAAYH,GAEvBI,GAAWC,EAAAA,EAAAA,MAEjB,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KAEMC,GAASC,EAAAA,EAAAA,MACTC,GAAQD,EAAAA,EAAAA,MAERE,EAAe,SAACC,GAEhB,OADiBA,EAAEC,cAAXT,MAEN,IAAK,OACHC,EAAQO,EAAEC,cAAcC,OACxB,MACF,IAAK,QACHP,EAASK,EAAEC,cAAcC,OAK9B,EAmBD,OACE,kBACAC,UAAWC,EACXC,SApBe,SAACL,GAChBA,EAAEM,iBACF,IAAMC,EAAoB3B,EAAS4B,MAAK,SAAAC,GAAO,OAAIA,EAAQjB,KAAKkB,sBAAwBlB,EAAKkB,mBAA9C,IACjDC,QAAQC,IAAIL,GACVI,QAAQC,IAAIhC,GACN2B,EACFM,EAAAA,OAAAA,QAAA,UAAkBrB,EAAlB,4BAKAH,GAASyB,EAAAA,EAAAA,IAAY,CAAEtB,KAAAA,EAAME,MAAAA,KAC7BD,EAAQ,IACRE,EAAS,IAEd,EAGC,WAGA,iBAAKQ,UAAWC,EAAhB,WACE,kBAAOW,QAASnB,EAAhB,mBACA,kBACAO,UAAWC,EACXY,GAAIpB,EACJqB,KAAK,OACLzB,KAAK,OACL0B,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,EACRlB,MAAOV,EACP6B,SAAUtB,QAEZ,iBAAKI,UAAWC,EAAhB,WACE,kBAAOW,QAASjB,EAAhB,oBACA,kBACAK,UAAWC,EACXY,GAAIlB,EACJmB,KAAK,SACLzB,KAAK,QACL0B,QAAQ,yFACRC,MAAM,+FACNjB,MAAOR,EACP2B,SAAUtB,EACVqB,UAAQ,QAEV,mBACAjB,UAAWC,EACXa,KAAK,SAFL,mBAKP,CCrFM,IAAMK,EAAY,SAAAC,GAAK,OAAIA,EAAMrC,MAAV,ECMjBsC,EAAQ,SAAC,GAAuD,IAAtDC,EAAqD,EAArDA,OAAmBC,GAAkC,EAA7CvB,UAA6C,EAAlCuB,SAASC,EAAyB,EAAzBA,UAAWC,EAAc,EAAdA,SAS5D,OAFAC,OAAOC,iBAAiB,WANF,SAAA9B,GACL,WAAXA,EAAE+B,OACFJ,GAAU,GACVK,SAASC,KAAKC,MAAMC,SAAW,GAEpC,KAID,gBACEhC,UAAWsB,EAAS,eAAiB,QACrCC,QAASA,EAFX,SAIKE,GAGN,ECtBD,GAAgB,YAAc,iCAAiC,YAAc,kCCS9D,SAASQ,EAAT,GAA0C,IAAnBC,EAAkB,EAAlBA,gBAIhC7C,EAGA6C,EAHA7C,KACAE,EAEA2C,EAFA3C,MACF4C,EACED,EADFC,IAEJ3B,QAAQC,IAAIyB,GAEZ,IAAMhD,GAAWC,EAAAA,EAAAA,MAEjB,GAAsCC,EAAAA,EAAAA,WAAS,GAA/C,eAAOgD,EAAP,KAAoBC,EAApB,KAME,OACE,iCACA,gBAAIrC,UAAWC,EAAAA,YAAf,WACQ,iCADR,KACuBZ,EADvB,KAC6B,mBACrB,cAAGW,UAAWC,EAAAA,IAAd,kBAFR,IAE0CV,GAClC,iBAAMS,UAAWC,EAAAA,YACjBsB,QAAS,kBAAMc,GAAe,EAArB,EADT,sBAH8BF,GAQrCC,IACK,SAACf,EAAD,CACAE,QAAS,kBAffc,GAAe,QACfR,SAASC,KAAKC,MAAMC,SAAW,GAchB,EACTV,OAAQc,EACRZ,UAAWa,EAHX,UAKJ,iBACAd,QAAS,SAAA1B,GAAC,OAAIA,EAAEyC,iBAAN,EACVhB,OAAQc,EAFR,2CAII,mBACAb,QAAS,WAELrC,GAASqD,EAAAA,EAAAA,IAAcJ,GAAM,EAHjC,wBAaT,CCjDO,IAAMK,EAAc,WAIxB,IAAM/D,GAAWQ,EAAAA,EAAAA,IAAYT,GAGvBO,GAASE,EAAAA,EAAAA,IAAYkC,GAqB3B,OACE,+BACM,wBAlBmB,WACvB,IAAKpC,EACH,OAAON,EAEL,IAAMgE,EAAmB1D,EAAOwB,oBAMlC,OAL0B9B,EAASM,QAAO,YAGxC,OAHoD,EAAVM,KACdkB,oBACEmC,SAASD,EAExC,GAEF,CAQIE,GAAqBC,KAAI,SAAAV,GAAe,OACvC,SAACD,EAAD,CAEAC,gBAAiBA,GADZA,EAAgBC,IAFkB,OAmB3C,EC7DV,EAAqC,mCAArC,EAA6F,mCAA7F,EAAgJ,8B,UCoC9I,EA/Ba,WAEX,IAAMU,GAAU5D,EAAAA,EAAAA,IAAYkC,GACtBjC,GAAWC,EAAAA,EAAAA,MAEX2D,GAASpD,EAAAA,EAAAA,MAOnB,OACI,iBAAKM,UAAWC,EAAhB,WACU,kBACAD,UAAWC,EACXW,QAASkC,EAFT,oCAKA,kBACA9C,UAAWC,EACXa,KAAK,OACLzB,KAAK,SACLU,MAAO8C,EACP3B,SAjBY,SAACrB,GACnB,IAAOE,EAASF,EAAEkD,OAAXhD,MACPb,GAAS8D,EAAAA,EAAAA,GAAUjD,GACpB,EAeOiB,MAAM,SACNC,UAAQ,MAGpB,EClCF,EAA4B,4BAA5B,EAAyE,iCAAzE,EAAwH,8BAAxH,EAAiK,2BAAjK,EAA8M,kCCY/L,SAASgC,IAEtB,IAAM/D,GAAWC,EAAAA,EAAAA,MACXV,GAAWQ,EAAAA,EAAAA,IAAYT,GAC9B,GAAyBS,EAAAA,EAAAA,IAAYN,GAA9BC,EAAP,EAAOA,QAASC,EAAhB,EAAgBA,MAIf,OAHIqE,EAAAA,EAAAA,YAAU,WACNhE,GAASiE,EAAAA,EAAAA,MACR,GAAE,CAACjE,KAEV,iBAAMc,UAAWC,EAAjB,WACE,iBAAKD,UAAWC,EAAhB,WACA,eAAID,UAAWC,EAAf,wBACE,SAACjB,EAAD,QAEF,iBAAKgB,UAAWC,EAAhB,WACA,sCACE,SAAC,EAAD,KACIrB,GAAWH,EAAS2E,OAAS,IAAK,SAACZ,EAAD,IACnC5D,IAAW,cAAGoB,UAAWC,EAAd,wBACXpB,IAAS,2DAInB,C,wDCnCD,IAkBIa,EAAS,WAGX,IAH0B,IAAd2D,EAAc,uDAAP,GACfxC,EAAK,GACLyC,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWJ,IAC3CA,KAAQ,CACb,IAAIK,EAAqB,GAAdJ,EAAMD,GAEfxC,GADE6C,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAET,CACD,OAAO7C,CACR,C","sources":["webpack://project1/./src/components/ContactForm/ContactForm.module.scss?6b75","redux/contacts/contacts-selector.js","components/ContactForm/ContactForm.jsx","redux/filter/filter-selector.js","components/Modal/Modal.jsx","webpack://project1/./src/components/ContactItem/ContactList.module.scss?c10e","components/ContactItem/ContactsItem.jsx","components/ContactList/ContactList.jsx","webpack://project1/./src/components/filter/Filter.module.scss?f3f1","components/filter/Filter.jsx","webpack://project1/./src/Pages/Contacts/Contacts.module.scss?edcc","Pages/Contacts/Contacts.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__zqkUM\",\"formInput\":\"ContactForm_formInput__4newl\",\"formInputName\":\"ContactForm_formInputName__MS9gi\",\"formInputTel\":\"ContactForm_formInputTel__QLeAr\",\"formBtn\":\"ContactForm_formBtn__EULMB\"};","export const getContacts = ({contacts}) => contacts.items;\nexport const getState = ({contacts}) => ({loading: contacts.loading, error: contacts.error});\nexport const getFilteredContacts = ({filter, contacts}) => {   \n    if (!filter) \n    {return contacts.items};\n};\nexport const selectContactInfo = state => console.log(state.contacts.items)\n\n","import { useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport scss from \"./ContactForm.module.scss\"\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getFilteredContacts } from 'redux/contacts/contacts-selector';\nimport { addContacts } from \"redux/contacts/contacts-operation\"; \nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nexport default function ContactForm () {\n  const contacts = useSelector(getFilteredContacts);\n  \n  const dispatch = useDispatch();\n\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n\n  const nameID = nanoid();\n  const telID = nanoid();\n\n  const handleChange = (e) => {\n        const { name } = e.currentTarget;\n        switch (name) {\n          case 'name':\n            setName(e.currentTarget.value);\n            break;\n          case 'phone':\n            setPhone(e.currentTarget.value);\n            break;\n          default:\n            break;\n        }\n      };\n\n  const handleSubmit = (e) => {\n        e.preventDefault()\n        const duplicateContacts = contacts.find(contact => contact.name.toLocaleLowerCase() === name.toLocaleLowerCase());\n      console.log(duplicateContacts)\n        console.log(contacts)\n          if (duplicateContacts) {\n            Notify.failure(`${name} is already in contact`)\n            // alert (`${name} is already in contact`)\n            return\n          }\n          else {\n            dispatch(addContacts({ name, phone }));\n            setName('');\n            setPhone('');\n          }\n      }; \n\n      return ( \n        <form \n        className={scss.form}\n        onSubmit={handleSubmit}>\n        <div className={scss.formInput}>\n          <label htmlFor={nameID}>Name</label>\n          <input \n          className={scss.formInputName}\n          id={nameID} \n          type=\"text\" \n          name=\"name\" \n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          value={name} \n          onChange={handleChange} />\n        </div>\n        <div className={scss.formInput}>\n          <label htmlFor={telID}>Phone</label>\n          <input \n          className={scss.formInputTel}\n          id={telID} \n          type=\"number\" \n          name=\"phone\" \n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          value={phone} \n          onChange={handleChange} \n          required/>\n        </div>\n        <button \n        className={scss.formBtn}\n        type=\"submit\">Add</button>\n        </form>\n        )\n};","export const getFilter = store => store.filter;","import React from 'react';\n// import { createPortal } from 'react-dom';\n// import { ModalBackdrop } from './Modal.styled';\n\n// const modalRoot = document.querySelector('#modal_root');\n\nexport const Modal = ({active, className, onClick, setActive, children}) => {\n  const handleKeyDown = e => {\n    if (e.code === 'Escape') {\n        setActive(false);\n        document.body.style.overflow = '';\n    }\n  };\n  window.addEventListener('keydown', handleKeyDown);\n \n  return (    \n  <div \n    className={active ? \"modal active\" : \"modal\"}\n    onClick={onClick}\n    >\n      {children}\n    </div>\n  );\n};","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"ContactList_contactList__d3iOA\",\"delContacts\":\"ContactList_delContacts__+Ilco\"};","import React from 'react'\nimport { \n    // useSelector, \n    useDispatch } from 'react-redux';\n// import { getContacts } from 'redux/contacts/contacts-selector';\nimport { Modal } from \"components/Modal/Modal\";\nimport scss from \"./ContactList.module.scss\"\nimport { useState } from 'react';\nimport { deleteContact } from \"redux/contacts/contacts-operation\"; \n\nexport default function ContactsItem({filteredContact}) {\n\n    // const contacts = useSelector(getContacts);\n    const {\n      name, \n      phone,\n    _id,\n  } = filteredContact;\nconsole.log(filteredContact)\n\nconst dispatch = useDispatch();\n\nconst [modalActive, setModalActive] = useState(false);\n\nfunction closeModal () {\n    setModalActive(false)\n    document.body.style.overflow = '';\n  }\n  return (\n    <>\n    <li className={scss.contactList} key={_id}> \n            <b>Name:</b>  {name} <br />\n            <b className={scss.tel}>Tel:</b> {phone} \n            <span className={scss.delContacts} \n            onClick={() => setModalActive(true)}>Delete</span>\n            \n            </li>\n            \n   { modalActive && (\n          <Modal\n          onClick={() => closeModal ()}\n          active={modalActive}\n          setActive={setModalActive}>\n\n      <div\n      onClick={e => e.stopPropagation()}\n      active={modalActive}>\n        Do you really wont to delete?\n          <button\n          onClick={() => \n            \n            { dispatch(deleteContact(_id))}} \n          >\n            yes\n          </button>\n        \n      </div>\n          </Modal>\n         )}\n    </>\n  )\n}\n","// import scss from \"./ContactList.module.scss\"\nimport { useSelector, \n  // useDispatch\n } from 'react-redux';\n// import { useState } from 'react';\nimport { getContacts } from 'redux/contacts/contacts-selector';\nimport  { getFilter }from 'redux/filter/filter-selector';\n// import { deleteContact } from \"redux/contacts/contacts-operation\"; \nimport ContactsItem from \"components/ContactItem/ContactsItem\";\n\n\n\n export const ContactList = () => {\n\n\n    \n    const contacts = useSelector(getContacts);\n\n\n    const filter = useSelector(getFilter);\n    // const dispatch = useDispatch();\n\n\n\n    const getFilteredContact = () => {\n        if (!filter) {\n          return contacts;\n        }\n            const normalizedFilter = filter.toLocaleLowerCase();\n            const filteredContact = contacts.filter(({name}) => {\n            const nornalizedName = name.toLocaleLowerCase();\n            const result = nornalizedName.includes(normalizedFilter);\n            return result;\n          })\n          return filteredContact;\n        };\n\n\n\n\n    return (\n      <>\n            <ul>\n            {getFilteredContact().map(filteredContact => (\n              <ContactsItem\n              key={filteredContact._id}\n              filteredContact={filteredContact}/>\n            // <li className={scss.contactList} key={_id}> \n            // <b>Name:</b>  {name} <br />\n            // <b className={scss.tel}>Tel:</b> {phone} \n            // <span className={scss.delContacts} \n            // onClick={() => setModalActive(true)}>Delete</span>\n            \n            // </li>\n            \n     ))} \n\n         </ul>\n         \n         </>\n    )\n\n         }","// extracted by mini-css-extract-plugin\nexport default {\"contactFilterInput\":\"Filter_contactFilterInput__A7VY6\",\"contactFilterLabel\":\"Filter_contactFilterLabel__EgZcb\",\"contactFilter\":\"Filter_contactFilter__CK3n0\"};","import scss from \"./Filter.module.scss\"\nimport { useSelector, useDispatch } from 'react-redux';\nimport  { getFilter }from 'redux/filter/filter-selector';\nimport { nanoid } from \"nanoid\";\nimport { setFilter } from \"redux/filter/filter-slice\";\n\nconst Filter = () => {\n\n    const filters = useSelector(getFilter);\n    const dispatch = useDispatch();\n\n    const findID = nanoid();\n\n    const  handleChange = (e) => {\n        const {value} = e.target;\n        dispatch(setFilter(value))\n      };\n\nreturn (\n    <div className={scss.contactFilter}>\n              <label\n              className={scss.contactFilterLabel}\n              htmlFor={findID}\n              >Find contacts by name\n              </label>\n              <input \n              className={scss.contactFilterInput}\n              type=\"text\" \n              name=\"filter\" \n              value={filters}\n              onChange={handleChange}\n              title=\"Search\"\n              required\n              />\n          </div>\n)};\n\n  export default Filter;","// extracted by mini-css-extract-plugin\nexport default {\"phoneBook\":\"Contacts_phoneBook__+krXn\",\"titlePhoneBook\":\"Contacts_titlePhoneBook__zzISd\",\"contactForm\":\"Contacts_contactForm__Pmztk\",\"contacts\":\"Contacts_contacts__B9d10\",\"contactsLoading\":\"Contacts_contactsLoading__GlHiY\"};","// import { useEffect } from \"react\";\nimport  ContactForm  from \"../../components/ContactForm/ContactForm\"\nimport {ContactList} from \"../../components/ContactList/ContactList\"\nimport { fetchContacts } from \"redux/contacts/contacts-operation\"\nimport Filter from \"../../components/filter/Filter\"\nimport scss from \"./Contacts.module.scss\"\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEffect } from \"react\";\nimport { getState } from 'redux/contacts/contacts-selector';\nimport { getContacts } from 'redux/contacts/contacts-selector';\n// import UseAuth from \"components/hooks/useAuth\"\n// import { Navigate } from \"react-router-dom\"\n\nexport default function Contacts() {\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n const {loading, error} = useSelector(getState);\n      useEffect(() => {\n          dispatch(fetchContacts());\n          }, [dispatch]);\n  return (\n    <div  className={scss.phoneBook}>\n      <div className={scss.contactForm}>\n      <h2 className={scss.titlePhoneBook}>PhoneBook</h2>\n        <ContactForm />\n      </div>\n      <div className={scss.contacts}>\n      <h2>Contacts</h2>\n        <Filter />\n          {!loading && contacts.length > 0 && <ContactList />}\n          {loading && <p className={scss.contactsLoading}>...loading</p>}\n          {error && <p>oops, something went wrong</p>}\n      </div>\n    </div>\n    )\n};","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["getContacts","contacts","items","getState","loading","error","getFilteredContacts","filter","ContactForm","useSelector","dispatch","useDispatch","useState","name","setName","phone","setPhone","nameID","nanoid","telID","handleChange","e","currentTarget","value","className","scss","onSubmit","preventDefault","duplicateContacts","find","contact","toLocaleLowerCase","console","log","Notify","addContacts","htmlFor","id","type","pattern","title","required","onChange","getFilter","store","Modal","active","onClick","setActive","children","window","addEventListener","code","document","body","style","overflow","ContactsItem","filteredContact","_id","modalActive","setModalActive","stopPropagation","deleteContact","ContactList","normalizedFilter","includes","getFilteredContact","map","filters","findID","target","setFilter","Contacts","useEffect","fetchContacts","length","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase"],"sourceRoot":""}